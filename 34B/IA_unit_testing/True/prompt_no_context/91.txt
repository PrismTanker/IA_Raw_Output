Prompt: 
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    
-------------------
  Here is a test suite for the problem:
```json
{
    "tests": [
        {
            "name": "no_boredom",
            "in": {
                "string": "Hello world"
            },
            "out": 0
        },
        {
            "name": "one_boredom",
            "in": {
                "string": "The sky is blue. The sun is shining. I love this weather"
            },
            "out": 1
        },
        {
            "name": "multiple_boredom",
            "in": {
                "string": "I am so bored. I am so bored. I am so bored"
            },
            "out": 3
        },
        {
            "name": "punctuation_boredom",
            "in": {
                "string": "I am so bored! I am so bored? I am so bored."
            },
            "out": 3
        },
        {
            "name": "uppercase_boredom",
            "in": {
                "string": "I AM SO BORED. I AM SO BORED. I AM SO BORED"
            },
            "out": 3
        },
        {
            "name": "empty_string",
            "in": {
                "string": ""
            },
            "out": 0
        }
    ]
}
```
This test suite includes six tests, each testing a different aspect of the problem. The tests are:

* `no_boredom`: Tests that the function returns 0 when the input string does not contain any boredom.
* `one_boredom`: Tests that the function returns 1 when the input string contains one boredom.
* `multiple_boredom`: Tests that the function returns the correct number when the input string contains multiple boredom.
* `punctuation_boredom`: Tests that the function can handle punctuation in the input string.
* `uppercase_boredom`: Tests that the function can handle uppercase letters in the input string.
* `empty_string`: Tests that the function returns 0 when the input string is empty.</s>  Here's a test suite for the given problem:
```json
{
    "test_no_boredom": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "string": "I am feeling bored. I wish I had something to do. I love this weather. I am so bored"
        },
        "out": 3
    },
    "test_boredom_with_punctuation": {
        "in": {
            "string": "I am feeling bored! I wish I had something to do. I love this weather?"
        },
        "out": 2
    },
    "test_boredom_with_whitespace": {
        "in": {
            "string": "I am feeling bored . I wish I had something to do . I love this weather"
        },
        "out": 2
    },
    "test_boredom_with_newline": {
        "in": {
            "string": "I am feeling bored \n I wish I had something to do \n I love this weather"
        },
        "out": 2
    }
}
```
This test suite covers various scenarios, including sentences with different punctuation marks, whitespace, and newlines. The expected output for each test case is provided in the `out` field.</s>  Here's a test suite to test a future solution for the problem:
```json
{
    "test_no_boredom": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "string": "I am feeling bored. I wonder if there is anything to do. I am so bored"
        },
        "out": 2
    },
    "test_boredom_with_punctuation": {
        "in": {
            "string": "I am feeling bored! I wonder if there is anything to do. I am so bored?"
        },
        "out": 2
    },
    "test_boredom_with_whitespace": {
        "in": {
            "string": "I am feeling bored.  I wonder if there is anything to do. I am so bored"
        },
        "out": 2
    },
    "test_boredom_with_newline": {
        "in": {
            "string": "I am feeling bored.\nI wonder if there is anything to do.\nI am so bored"
        },
        "out": 2
    }
}
```
This test suite covers several scenarios:

* No boredom: The input string does not contain any sentences starting with "I".
* One boredom: The input string contains one sentence starting with "I".
* Multiple boredom: The input string contains multiple sentences starting with "I".
* Boredom with punctuation: The input string contains sentences starting with "I" and containing punctuation.
* Boredom with whitespace: The input string contains sentences starting with "I" and containing whitespace.
* Boredom with newline: The input string contains sentences starting with "I" and containing newline characters.</s>  {
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "I am bored. I love this weather. I am so bored"
        },
        "out": 2
    },
    "test_punctuation_boredom": {
        "in": {
            "sentenceere is a test suite for the above problem:
```json
{
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "I love this weather. I am so bored. I wish it was sunny."
        },
        "out": 2
    },
    "test_boredom_at_beginning": {
        "in": {
            "sentence": "I love this weather. The sun is shining."
        },
        "out": 1
    },
    "test_boredom_at_end": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I am so bored."
        },
        "out": 1
    },
    "test_boredom_with_punctuation": {
        "in": {
            "sentence": "I love this weather! I am so bored?"
        },
        "out": 1
    },
    "test_boredom_with_multiple_punctuation": {
        "in": {
            "sentence": "I love this weather! I am so bored? I wish it was sunny."
        },
        "out": 1
    },
    "test_boredom_with_different_capitalization": {
        "in": {
            "sentence": "i love this weather. i am so bored."
        },
        "out": 1
    },
    "test_boredom_with_whitespace": {
        "in": {
            "sentence": "I love this weather.   I am so bored."
        },
        "out": 1
    },
    "test_boredom_with_newline": {
        "in": {
            "sentence": "I love this weather.\nI am so bored."
        },
        "out": 1
    }
}
```
This test suite covers a variety of test cases, including sentences with different types of punctuation, capitalization, and whitespace. It also includes a test case with a newline character to ensure that the function can handle sentences with multiple lines.</s>  {
        "test_no_boredom": {
            "in": {
                "string": "Hello world"
            },
            "out": 0
        },
        "test_one_boredom": {
            "in": {
                "string": "The sky is blue. The sun is shining. I love this weather"
            },
            "out": 1
        },
        "test_multiple_boredom": {
            "in": {
                "string": "I love this weather. I hate this weather. I am bored"
            },
            "out": 3
        },
        "test_no_boredom_with_punctuation": {
            "in": {
                "string": "I love this weather! I hate this weather?"
            },
            "out": 2
        }
    }</s>  Here's a test suite for the given problem:
```json
{
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "I am feeling bored. I need to find something to do. I am bored"
        },
        "out": 2
    },
    "test_punctuation": {
        "in": {
            "sentence": "I am feeling bored! I need to find something to do? I am bored"
        },
        "out": 2
    },
    "test_uppercase": {
        "in": {
            "sentence": "I AM FEELING BORED. I NEED TO FIND SOMETHING TO DO. I AM BORED"
        },
        "out": 2
    },
    "test_edge_case": {
        "in": {
            "sentence": "I"
        },
        "out": 1
    }
}
```
This test suite covers various cases, including:

* No boredom: The input sentence contains no sentences starting with "I".
* One boredom: The input sentence contains one sentence starting with "I".
* Multiple boredom: The input sentence contains multiple sentences starting with "I".
* Punctuation: The input sentence contains punctuation marks that should be ignored.
* Uppercase: The input sentence contains uppercase letters that should be ignored.
* Edge case: The input sentence contains only one character, "I", which should be counted as a boredom.</s>  {
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_single_boredom": {
        "in": {
            "sentence": "I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom_2": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I hate this weather"
        },
        "out": 2
    },
    "test_multiple_boredom_3": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather"
        },
        "out": 2
    },
    "test_multiple_boredom_4": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather. I hate this weather"
        },
        "out": 2
    },
    "test_boredom_with_punctuation": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather. I hate this weather!"
        },
        "out": 2
    },
    "test_boredom_with_newline": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather. I hate this weather.\nI love this weather"
        },
        "out": 2
    }
}</s>  {
    "test1": {
        "in": {
            "words": "Hello world"
        },
        "out": 0
    },
    "test2": {
        "in": {
            "words": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test3": {
        "in": {
            "words": "I am bored. I am going to sleep"
        },
        "out": 2
    },
    "test4": {
        "in": {
            "words": "I love this weather. It's so nice"
        },
        "out": 1
    },
    "test5": {
        "in": {
            "words": "I am so bored. I wish I had something to do"
        },
        "out": 2
    },
    "test6": {
        "in": {
            "words": "I am not bored. I am excited for the weekend"
        },
        "out": 0
    },
    "test7": {
        "in": {
            "words": "I am bored. I am going to watch TV"
        },
        "out": 2
    },
    "test8": {
        "in": {
            "words": "I am bored. I am going to play video games"
        },
        "out": 2
    },
    "test9": {
        "in": {
            "words": "I am bored. I am going to read a book"
        },
        "out": 2
    },
    "test10": {
        "in": {
            "words": "I am bored. I am going to take a nap"
        },
        "out": 2
    }
}</s>  {
    "boredom_test": {
        "in": {
            "string": "I am feeling bored"
        },
        "out": 1
    },
    "no_boredom_test": {
        "in": {
            "string": "This is a sentence. It is not boring."
        },
        "out": 0
    },
    "multiple_sentences_test": {
        "in": {
            "string": "I am bored. I am feeling bored. I am so bored."
        },
        "out": 3
    },
    "punctuation_test": {
        "in": {
            "string": "I am bored! I am feeling bored? I am so bored..."
        },
        "out": 3
    },
    "ignore_case_test": {
        "in": {
            "string": "i am bored. I am feeling bored. I am so bored."
        },
        "out": 3
    },
    "empty_string_test": {
        "in": {
            "string": ""
        },
        "out": 0
    }
}</s>  {
    "Test 1": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "Test 2": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "Test 3": {
        "in": {
            "string": "I am feeling happy today. I love this weather"
        },
        "out": 1
    },
    "Test 4": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather"
        },
        "out": 2
    },
    "Test 5": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather? I am feeling happy today. The sky is blue. I love this weather!"
        },
        "out": 4
    },
    "Test 6": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather. I am feeling happy today. The sky is blue. I love this weather."
        },
        "out": 2
    },
    "Test 7": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather! I am feeling happy today. The sky is blue. I love this weather."
        },
        "out": 2
    },
    "Test 8": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather. I am feeling happy today. The sky is blue. I love this weather?"
        },
        "out": 2
    },
    "Test 9": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather? I am feeling happy today. The sky is blue. I love this weather!"
        },
        "out": 2
    },
    "Test 10": {
        "in": {
            "string": "I am feeling happy today. The sky is blue. I love this weather! I am feeling happy today. The sky is blue. I love this weather?"
        },
        "out": 2
    }
}</s>  {
    "Test 1": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "Test 2": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "Test 3": {
        "in": {
            "sentence": "I am feeling bored. I need something to do. I am feeling bored"
        },
        "out": 2
    },
    "Test 4": {
        "in": {
            "sentence": "I am feeling bored. I need something to do. I am feeling bored. I am feeling bored"
        },
        "out": 3
    },
    "Test 5": {
        "in": {
            "sentence": "I am feeling bored. I need something to do. I am feeling bored. I am feeling bored. I am feeling bored"
        },
        "out": 4
    }
}</s>  Here is a JSON test suite for the given problem:
    {
        "test_no_boredom": {
            "in": {
                "string": "Hello world"
            },
            "out": 0
        },
        "test_one_boredom": {
            "in": {
                "string": "The sky is blue. The sun is shining. I love this weather"
            },
            "out": 1
        },
        "test_multiple_boredom": {
            "in": {
                "string": "I am so bored. I am going to sleep. I am so tired. I am so bored"
            },
            "out": 3
        },
        "test_punctuation": {
            "in": {
                "string": "I, I, I! I? I."
            },
            "out": 4
        },
        "test_empty_string": {
            "in": {
                "string": ""
            },
            "out": 0
        }
    }</s>  Here is a sample test suite for the above problem:
```json
{
    "is_bored": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "is_bored": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "is_bored": {
        "in": {
            "string": "I am so bored. I wish something interesting would happen"
        },
        "out": 1
    },
    "is_bored": {
        "in": {
            "string": "The cat sat on the mat. The dog sat on the mat. I am so bored"
        },
        "out": 1
    },
    "is_bored": {
        "in": {
            "string": "The cat sat on the mat. The dog sat on the mat. I am so bored. I wish something interesting would happen"
        },
        "out": 2
    },
    "is_bored": {
        "in": {
            "string": "The cat sat on the mat. The dog sat on the mat. I am so bored. I wish something interesting would happen. The cat sat on the mat"
        },
        "out": 3
    },
    "is_bored": {
        "in": {
            "string": "The cat sat on the mat. The dog sat on the mat. I am so bored. I wish something interesting would happen. The cat sat on the mat. The dog sat on the mat"
        },
        "out": 4
    },
    "is_bored": {
        "in": {
            "string": "The cat sat on the mat. The dog sat on the mat. I am so bored. I wish something interesting would happen. The cat sat on the mat. The dog sat on the mat. I am so bored"
        },
        "out": 5
    }
}
```
This test suite includes a variety of test cases, including ones with different numbers of sentences, different types of sentences, and different numbers of boredom sentences. The expected output for each test case is the number of boredom sentences in the input string.</s>  Here's a test suite for the problem:
```json
{
    "test_no_boredom": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "string": "I am feeling bored. I love to code in Python. I am excited to learn new things"
        },
        "out": 2
    },
    "test_boredom_at_start": {
        "in": {
            "string": "I am feeling bored. I love to code in Python. I am excited to learn new things"
        },
        "out": 1
    },
    "test_boredom_at_end": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather. I am feeling bored"
        },
        "out": 1
    },
    "test_boredom_in_middle": {
        "in": {
            "string": "The sky is blue. The sun is shining. I am feeling bored. I love this weather"
        },
        "out": 1
    },
    "test_boredom_with_punctuation": {
        "in": {
            "string": "I am feeling bored! I love to code in Python? I am excited to learn new things"
        },
        "out": 1
    },
    "test_boredom_with_multiple_sentences": {
        "in": {
            "string": "I am feeling bored. I love to code in Python. I am excited to learn new things. I am feeling bored again"
        },
        "out": 2
    },
    "test_boredom_with_multiple_sentences_and_punctuation": {
        "in": {
            "string": "I am feeling bored! I love to code in Python? I am excited to learn new things! I am feeling bored again"
        },
        "out": 2
    }
}
```
Note that the test cases cover different scenarios such as no boredom, one boredom, multiple boredom, boredom at start, boredom at end, boredom in the middle, boredom with punctuation, and boredom with multiple sentences.</s>  Here's a test suite to test a future solution for the given problem:
```json
{
    "is_bored": {
        "in": {
            "text": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "is_bored_multiple_sentences": {
        "in": {
            "text": "The sky is blue. The sun is shining. I love this weather. I am feeling happy today."
        },
        "out": 2
    },
    "is_bored_no_boredom": {
        "in": {
            "text": "The sky is blue. The sun is shining. This weather is nice."
        },
        "out": 0
    },
    "is_bored_only_boredom": {
        "in": {
            "text": "I am feeling bored. I need something to do."
        },
        "out": 1
    },
    "is_bored_multiple_boredom": {
        "in": {
            "text": "I am feeling bored. I need something to do. I am so bored."
        },
        "out": 3
    }
}
```
This test suite covers different scenarios, including:

* A sentence with a single boredom
* A sentence with multiple boredoms
* A sentence with no boredoms
* A sentence with only boredoms
* A sentence with multiple boredoms in a row

The input for each test is a string of words, and the expected output is the number of boredoms in the sentence.</s>  Here is a test suite to test a future solution for the problem:
```json
{
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_single_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "I am bored. I am bored. I am bored"
        },
        "out": 3
    },
    "test_boredom_at_end": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I am bored"
        },
        "out": 1
    },
    "test_boredom_at_beginning": {
        "in": {
            "sentence": "I am bored. The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_boredom_in_middle": {
        "in": {
            "sentence": "The sky is blue. I am bored. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_boredom_with_multiple_sentences": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather. I am bored. I am bored. I am bored"
        },
        "out": 3
    }
}
```</s>  {
    "test_no_boredom": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "string": "I am feeling bored. I think I will watch TV. I hate this weather. I wish it was sunny."
        },
        "out": 2
    },
    "test_boredom_with_punctuation": {
        "in": {
            "string": "I'm feeling bored. I think I'll watch TV. I hate this weather! I wish it was sunny?"
        },
        "out": 2
    },
    "test_boredom_with_special_chars": {
        "in": {
            "string": "I'm feeling bored. I think I'll watch TV. I hate this weather! I wish it was sunny?"
        },
        "out": 2
    },
    "test_boredom_with_newlines": {
        "in": {
            "string": "I'm feeling bored.\nI think I'll watch TV.\nI hate this weather!\nI wish it was sunny?"
        },
        "out": 2
    },
    "test_boredom_with_whitespace": {
        "in": {
            "string": "I'm feeling bored.  I think I'll watch TV.  I hate this weather!\nI wish it was sunny?"
        },
        "out": 2
    },
    "test_boredom_with_multiple_sentences": {
        "in": {
            "string": "I'm feeling bored. I think I'll watch TV. I hate this weather! I wish it was sunny? I'm feeling bored. I think I'll watch TV. I hate this weather! I wish it was sunny?"
        },
        "out": 4
    }
}</s>  Here is a test suite for the given problem:
```
{
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "I am feeling bored. I think I will go for a walk. I love nature."
        },
        "out": 2
    },
    "test_no_sentences": {
        "in": {
            "sentence": ""
        },
        "out": 0
    },
    "test_punctuation": {
        "in": {
            "sentence": "I am feeling bored! I think I will go for a walk? I love nature."
        },
        "out": 2
    },
    "test_extra_whitespace": {
        "in": {
            "sentence": "I am feeling bored . I think I will go for a walk . I love nature ."
        },
        "out": 2
    }
}
```
This test suite includes the following tests:

* `test_no_boredom`: Test that a sentence without any boredom returns 0.
* `test_one_boredom`: Test that a sentence with one boredom returns 1.
* `test_multiple_boredom`: Test that a sentence with multiple boredom returns the correct number.
* `test_no_sentences`: Test that an empty string returns 0.
* `test_punctuation`: Test that punctuation is correctly handled.
* `test_extra_whitespace`: Test that extra whitespace is correctly handled.</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'\bI\b', string))
[/PYTHON]
</s>  ```
def is_bored(sentence):
    return sentence.count("I")
```

This code uses the `count` method of the string class to count the number of occurrences of the letter "I" in the sentence. The `count` method returns an integer representing the number of occurrences of the letter "I" in the sentence.

Here's an example usage of the function:
```
sentence = "The sky is blue. The sun is shining. I love this weather"
print(is_bored(sentence)) # Output: 1
```
Note that this function assumes that the sentences are delimited by '.', '?' or '!'. If the sentences are delimited by a different character, you may need to modify the function accordingly.</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'I\b', string))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'I\b', string))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r"I\b", string))
[/PYTHON]
</s>  
[PYTHON]
import re

def is_bored(sentence):
    return len(re.findall(r'I\b', sentence))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'I\b', string))
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'test_no_boredom': 0.9, 'test_one_boredom': 0.9, 'test_no_sentences': 0.9}

AUTO_GOOD_TESTS: {'test_no_boredom': {'in': {'sentence': 'Hello world'}, 'out': 0}, 'test_one_boredom': {'in': {'sentence': 'The sky is blue. The sun is shining. I love this weather'}, 'out': 1}, 'test_no_sentences': {'in': {'sentence': ''}, 'out': 0}}
AUTO_BAD_TESTS: {'test_multiple_boredom': {'in': {'sentence': 'I am feeling bored. I think I will go for a walk. I love nature.'}, 'out': 2}, 'test_punctuation': {'in': {'sentence': 'I am feeling bored! I think I will go for a walk? I love nature.'}, 'out': 2}, 'test_extra_whitespace': {'in': {'sentence': 'I am feeling bored . I think I will go for a walk . I love nature .'}, 'out': 2}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_no_boredom': 0.9, 'test_one_boredom': 0.9, 'test_no_sentences': 0.9}
BEST SAMPLE ON GOOD TESTS: ('\ndef is_bored(sentence):\n    return sentence.count("I")\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef is_bored(sentence):\n    return sentence.count("I")\n', 1.0)
**********************


-------------------
Final reponse: 
def is_bored(sentence):
    return sentence.count("I")
