Prompt:  brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    
-------------------
  
{
"correct_bracketing_test1": {
"in": {
"brackets": "("
},
"out": False
},
"correct_bracketing_test2": {
"in": {
"brackets": "()"
},
"out": True
},
"correct_bracketing_test3": {
"in": {
"brackets": "(()())"
},
"out": True
},
"correct_bracketing_test4": {
"in": {
"brackets": ")(()"
},
"out": False
}
}</s>  
{
"correct_bracketing_test1": {
"in": {
"brackets": "("
},
"out": False
},
"correct_bracketing_test2": {
"in": {
"brackets": "()"
},
"out": True
},
"correct_bracketing_test3": {
"in": {
"brackets": "(()())"
},
"out": True
},
"correct_bracketing_test4": {
"in": {
"brackets": ")(()()"
},
"out": False
}
}</s>  
[PYTHON]
{
    "TEST 1": {
        "in": {
            "brackets": "("
        },
        "out": False
    },
    "TEST 2": {
        "in": {
            "brackets": "()"
        },
        "out": True
    },
    "TEST 3": {
        "in": {
            "brackets": "(()())"
        },
        "out": True
    },
    "TEST 4": {
        "in": {
            "brackets": ")(()("
        },
        "out": False
    }
}
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(string):
    stack = []
    for char in string:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(string):
    stack = []
    for char in string:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(string):
    stack = []
    for char in string:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>  
[PYTHON]
def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'TEST 1': 1.0, 'TEST 2': 1.0, 'TEST 3': 1.0, 'TEST 4': 1.0}

AUTO_GOOD_TESTS: {'TEST 1': {'in': {'brackets': '('}, 'out': False}, 'TEST 2': {'in': {'brackets': '()'}, 'out': True}, 'TEST 3': {'in': {'brackets': '(()())'}, 'out': True}, 'TEST 4': {'in': {'brackets': ')(()('}, 'out': False}}
AUTO_BAD_TESTS: {}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'TEST 1': 1.0, 'TEST 2': 1.0, 'TEST 3': 1.0, 'TEST 4': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef correct_bracketing(string):\n    stack = []\n    for char in string:\n        if char == "(":\n            stack.append(char)\n        elif char == ")":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef correct_bracketing(string):\n    stack = []\n    for char in string:\n        if char == "(":\n            stack.append(char)\n        elif char == ")":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n', 1.0)
**********************


-------------------
Final reponse: 
def correct_bracketing(string):
    stack = []
    for char in string:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
