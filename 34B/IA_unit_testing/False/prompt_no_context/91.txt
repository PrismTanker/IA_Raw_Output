Prompt: 
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    
-------------------
  {
        "test_no_boredom": {
            "in": {
                "string": "Hello world"
            },
            "out": 0
        },
        "test_one_boredom": {
            "in": {
                "string": "The sky is blue. The sun is shining. I love this weather"
            },
            "out": 1
        },
        "test_multiple_boredom": {
            "in": {
                "string": "I am bored. I am so bored. I am really bored!"
            },
            "out": 3
        },
        "test_punctuation_variations": {
            "in": {
                "string": "I am bored? I am so bored! I am really bored."
            },
            "out": 3
        },
        "test_invalid_input": {
            "in": {
                "string": "I am not bored. I am not bored. I am not bored."
            },
            "out": 0
        }
    }</s>  {
    "test_no_boredom": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather. I am so bored."
        },
        "out": 2
    },
    "test_boredom_with_question_mark": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather? I am so bored."
        },
        "out": 2
    },
    "test_boredom_with_exclamation_mark": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather! I am so bored."
        },
        "out": 2
    },
    "test_boredom_with_multiple_sentences": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather. I am so bored. I am so bored."
        },
        "out": 3
    },
    "test_boredom_with_punctuation": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather. I am so bored!"
        },
        "out": 2
    },
    "test_boredom_with_special_characters": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather. I am so bored?"
        },
        "out": 2
    }
}</s>  {
    "test_boredom_count": {
        "in": {
            "input_string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_boredom_count_multiple": {
        "in": {
            "input_string": "I am bored. I am excited. I am happy. I am sad."
        },
        "out": 4
    },
    "test_boredom_count_punctuation": {
        "in": {
            "input_string": "I am bored? I am excited! I am happy."
        },
        "out": 3
    },
    "test_boredom_count_empty": {
        "in": {
            "input_string": ""
        },
        "out": 0
    },
    "test_boredom_count_no_boredom": {
        "in": {
            "input_string": "The sky is blue. The sun is shining. I am happy"
        },
        "out": 0
    }
}</s>  Here is a test suite to test a future solution for the problem:
```json
{
    "boredom_test": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "non_boredom_test": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "multiple_boredom_test": {
        "in": {
            "sentence": "I love this weather. I hate this weather. I am so bored"
        },
        "out": 2
    },
    "edge_case_test": {
        "in": {
            "sentence": "I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I  Here's a sample test suite in JSON format:
    {
        "boredom_test": {
            "in": {
                "sentence": "I love this weather"
            },
            "out": 1
        },
        "no_boredom_test": {
            "in": {
                "sentence": "The sky is blue. The sun is shining."
            },
            "out": 0
        },
        "multiple_boredom_test": {
            "in": {
                "sentence": "I love this weather. I am feeling bored."
            },
            "out": 2
        },
        "punctuation_test": {
            "in": {
                "sentence": "I love this weather!"
            },
            "out": 1
        }
    }</s>  Here is a test suite to test a future solution for the "boredom" problem:
```json
{
    "test_no_boredom": {
        "in": {
            "string": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "string": "I am bored. I am so bored. I am really bored"
        },
        "out": 3
    },
    "test_punctuation_variations": {
        "in": {
            "string": "I am bored! I am so bored? I am really bored!"
        },
        "out": 3
    },
    "test_whitespace_variations": {
        "in": {
            "string": "I am bored. I am so bored. I am really bored"
        },
        "out": 3
    },
    "test_no_matching_words": {
        "in": {
            "string": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 0
    },
    "test_empty_string": {
        "in": {
            "string": ""
        },
        "out": 0
    }
}
```
This test suite covers a variety of test cases, including strings with no boredom, strings with multiple boredom, and strings with punctuation variations. It also includes a test case with an empty string, which should return 0.</s>  Here is a test suite for the problem:
```
{
    "test_no_boredom": {
        "in": {
            "sentence": "Hello world"
        },
        "out": 0
    },
    "test_one_boredom": {
        "in": {
            "sentence": "The sky is blue. The sun is shining. I love this weather"
        },
        "out": 1
    },
    "test_multiple_boredom": {
        "in": {
            "sentence": "I am bored. I am bored. I am bored"
        },
        "out": 3
    },
    "test_edge_case": {
        "in": {
            "sentence": "I am bored."
        },
        "out": 1
    },
    "test_empty_string": {
        "in": {
            "sentence": ""
        },
        "out": 0
    }
}
```
This test suite covers the following test cases:

* test_no_boredom: Tests that no boredom is counted when there are no sentences that start with "I".
* test_one_boredom: Tests that one boredom is counted when there is one sentence that starts with "I".
* test_multiple_boredom: Tests that multiple boredoms are counted when there are multiple sentences that start with "I".
* test_edge_case: Tests that a boredom is counted when the last sentence starts with "I".
* test_empty_string: Tests that no boredom is counted when the input string is empty.</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
```

<!-- tabs:start -->
#### ** Example **

```
>>> is_bored("I love this weather")
1
```

#### ** Solution **

```
def is_bored(sentence):
    return sentence.count("I")
```

<!-- tabs:end -->
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'I\b', string))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    return string.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(sentence):
    return sentence.count("I")
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r"I\b", string))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'I\b', string))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r"I\b", string))
[/PYTHON]
</s>  
[PYTHON]
def is_bored(string):
    import re
    return len(re.findall(r'I\b', string))
[/PYTHON]
</s>
GOOD TEST EVALUATION RESULTS: {'test_no_boredom': 1.0, 'test_one_boredom': 1.0, 'test_multiple_boredom': 1.0, 'test_edge_case': 1.0, 'test_empty_string': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef is_bored(string):\n    return string.count("I")\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef is_bored(string):\n    return string.count("I")\n', 1.0)
**********************


-------------------
Final reponse: 
def is_bored(string):
    return string.count("I")
