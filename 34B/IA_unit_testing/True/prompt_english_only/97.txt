Prompt: Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
-------------------
  Here is a test suite for the function:
```
{
    "test_single_digit_numbers": {
        "in": {
            "a": 1,
            "b": 2
        },
        "out": 2
    },
    "test_double_digit_numbers": {
        "in": {
            "a": 12,
            "b": 23
        },
        "out": 6
    },
    "test_negative_numbers": {
        "in": {
            "a": -12,
            "b": -23
        },
        "out": -6
    },
    "test_zero": {
        "in": {
            "a": 0,
            "b": 0
        },
        "out": 0
    }
}
```
This test suite covers the following test cases:

* `test_single_digit_numbers`: Tests the function with single-digit numbers.
* `test_double_digit_numbers`: Tests the function with double-digit numbers.
* `test_negative_numbers`: Tests the function with negative numbers.
* `test_zero`: Tests the function with zero.</s>  ```
def unit_digit_product(a, b):
    return (a % 10) * (b % 10)
```</s>  ```
def get_unit_product(num1, num2):
    return (num1 % 10) * (num2 % 10)
```</s>  ```
def get_unit_digit_product(a, b):
    return a % 10 * b % 10
```</s>  ```
def get_unit_digit_product(a, b):
    return a % 10 * b % 10
```</s>  ```
def get_unit_digit_product(num1, num2):
    return (num1 % 10) * (num2 % 10)
```</s>  ```
def get_unit_digit_product(num1, num2):
    return (num1 % 10) * (num2 % 10)
```</s>  ```
def get_unit_digit_product(num1, num2):
    return (num1 % 10) * (num2 % 10)
```</s>  ```
def get_unit_digit_product(a, b):
    return (a % 10) * (b % 10)
```</s>  ```
def get_unit_digit_product(a, b):
    return (a % 10) * (b % 10)
```</s>  ```
def unit_product(a, b):
    return (a % 10) * (b % 10)
```</s>
NEW TEST EVALUATION RESULTS: {'test_single_digit_numbers': 1.0, 'test_double_digit_numbers': 1.0, 'test_zero': 1.0}

AUTO_GOOD_TESTS: {'test_single_digit_numbers': {'in': {'a': 1, 'b': 2}, 'out': 2}, 'test_double_digit_numbers': {'in': {'a': 12, 'b': 23}, 'out': 6}, 'test_zero': {'in': {'a': 0, 'b': 0}, 'out': 0}}
AUTO_BAD_TESTS: {'test_negative_numbers': {'in': {'a': -12, 'b': -23}, 'out': -6}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_single_digit_numbers': 1.0, 'test_double_digit_numbers': 1.0, 'test_zero': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef unit_product(a, b):\n    return (a % 10) * (b % 10)\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef unit_product(a, b):\n    return (a % 10) * (b % 10)\n', 1.0)
**********************


-------------------
Final reponse: 
def unit_product(a, b):
    return (a % 10) * (b % 10)
