Prompt: 

def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """

-------------------
  Here's a test suite for the `is_prime` function:
```
{
    "is_prime_test1": {
        "in": {
            "n": 6
        },
        "out": False
    },
    "is_prime_test2": {
        "in": {
            "n": 101
        },
        "out": True
    },
    "is_prime_test3": {
        "in": {
            "n": 11
        },
        "out": True
    },
    "is_prime_test4": {
        "in": {
            "n": 13441
        },
        "out": True
    },
    "is_prime_test5": {
        "in": {
            "n": 61
        },
        "out": True
    },
    "is_prime_test6": {
        "in": {
            "n": 4
        },
        "out": False
    },
    "is_prime_test7": {
        "in": {
            "n": 1
        },
        "out": False
    }
}
```
This test suite includes seven tests for the `is_prime` function, each with a different input value for `n` and the expected output. The tests cover a range of inputs, including prime and non-prime numbers, to ensure that the function is working correctly for all possible inputs.</s>  
[PYTHON]
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'is_prime_test1': 1.0, 'is_prime_test2': 1.0, 'is_prime_test3': 1.0, 'is_prime_test4': 1.0, 'is_prime_test5': 1.0, 'is_prime_test6': 1.0, 'is_prime_test7': 1.0}

AUTO_GOOD_TESTS: {'is_prime_test1': {'in': {'n': 6}, 'out': False}, 'is_prime_test2': {'in': {'n': 101}, 'out': True}, 'is_prime_test3': {'in': {'n': 11}, 'out': True}, 'is_prime_test4': {'in': {'n': 13441}, 'out': True}, 'is_prime_test5': {'in': {'n': 61}, 'out': True}, 'is_prime_test6': {'in': {'n': 4}, 'out': False}, 'is_prime_test7': {'in': {'n': 1}, 'out': False}}
AUTO_BAD_TESTS: {}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'is_prime_test1': 1.0, 'is_prime_test2': 1.0, 'is_prime_test3': 1.0, 'is_prime_test4': 1.0, 'is_prime_test5': 1.0, 'is_prime_test6': 1.0, 'is_prime_test7': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n', 1.0)
**********************


-------------------
Final reponse: 
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
