Prompt: Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    
-------------------
  Here's a test suite for the `monotonic` function:
```json
{
    "tests": [
        {
            "in": {
                "list": [1, 2, 4, 20]
            },
            "out": true
        },
        {
            "in": {
                "list": [1, 20, 4, 10]
            },
            "out": false
        },
        {
            "in": {
                "list": [4, 1, 0, -10]
            },
            "out": true
        }
    ]
}
```
In this test suite, we have three test cases, each with a different input list and the expected output. The input lists are of varying lengths and contain both positive and negative numbers. The expected outputs are `true` for increasing or decreasing lists and `false` for lists that are not monotonic.</s>  Here is a test suite that covers the three examples given in the problem statement:
    {
        "test_monotonic_increasing": {
            "in": {
                "lst": [1, 2, 4, 20]
            },
            "out": True
        },
        "test_monotonic_decreasing": {
            "in": {
                "lst": [1, 20, 4, 10]
            },
            "out": False
        },
        "test_non_monotonic": {
            "in": {
                "lst": [4, 1, 0, -10]
            },
            "out": True
        }
    }</s>  {
    "test_monotonic_increasing": {
        "in": {
            "my_list": [1, 2, 4, 20]
        },
        "out": True
    },
    "test_monotonic_decreasing": {
        "in": {
            "my_list": [1, 20, 4, 10]
        },
        "out": False
    },
    "test_monotonic_non_increasing": {
        "in": {
            "my_list": [4, 1, 0, -10]
        },
        "out": True
    },
    "test_monotonic_non_decreasing": {
        "in": {
            "my_list": [10, 1, 4, 20]
        },
        "out": False
    },
    "test_monotonic_empty_list": {
        "in": {
            "my_list": []
        },
        "out": True
    },
    "test_monotonic_single_element_list": {
        "in": {
            "my_list": [1]
        },
        "out": True
    },
    "test_monotonic_duplicate_elements_list": {
        "in": {
            "my_list": [1, 1, 1, 1]
        },
        "out": True
    },
    "test_monotonic_negative_elements_list": {
        "in": {
            "my_list": [-1, -2, -3, -4]
        },
        "out": True
    },
    "test_monotonic_mixed_elements_list": {
        "in": {
            "my_list": [1, -2, 3, -4]
        },
        "out": False
    }
}</s>  {
    "monotonic_increasing": {
        "in": {
            "my_list": [1, 2, 4, 20]
        },
        "out": True
    },
    "monotonic_decreasing": {
        "in": {
            "my_list": [1, 20, 4, 10]
        },
        "out": False
    },
    "monotonic_non_decreasing": {
        "in": {
            "my_list": [4, 1, 0, -10]
        },
        "out": True
    }
}</s>  Here's a test suite for the given problem:
```
{
    "monotonic_increasing": {
        "in": {
            "list": [1, 2, 4, 20]
        },
        "out": True
    },
    "monotonic_decreasing": {
        "in": {
            "list": [1, 20, 4, 10]
        },
        "out": False
    },
    "monotonic_non_decreasing": {
        "in": {
            "list": [4, 1, 0, -10]
        },
        "out": True
    }
}
```
This test suite includes three tests:

1. `monotonic_increasing`: Tests a list with monotonically increasing elements.
2. `monotonic_decreasing`: Tests a list with monotonically decreasing elements.
3. `monotonic_non_decreasing`: Tests a list with monotonically non-decreasing elements.

Each test includes a `list` parameter with the input list, and an `out` parameter with the expected output.</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] <= my_list[i + 1] for i in range(len(my_list) - 1)) or all(my_list[i] >= my_list[i + 1] for i in range(len(my_list) - 1))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    return all(my_list[i] >= my_list[i+1] for i in range(len(my_list)-1)) or all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] <= my_list[i + 1] for i in range(len(my_list) - 1)) or all(my_list[i] >= my_list[i + 1] for i in range(len(my_list) - 1))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] <= my_list[i + 1] for i in range(len(my_list) - 1)) or all(my_list[i] >= my_list[i + 1] for i in range(len(my_list) - 1))
[/PYTHON]
</s>  
[PYTHON]
def monotonic(my_list):
    if len(my_list) <= 1:
        return True
    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))
[/PYTHON]
</s>
GOOD TEST EVALUATION RESULTS: {'monotonic_increasing': 1.0, 'monotonic_decreasing': 1.0, 'monotonic_non_decreasing': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef monotonic(my_list):\n    return all(my_list[i] >= my_list[i+1] for i in range(len(my_list)-1)) or all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef monotonic(my_list):\n    return all(my_list[i] >= my_list[i+1] for i in range(len(my_list)-1)) or all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))\n', 1.0)
**********************


-------------------
Final reponse: 
def monotonic(my_list):
    return all(my_list[i] >= my_list[i+1] for i in range(len(my_list)-1)) or all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))
