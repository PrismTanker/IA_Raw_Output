Prompt: Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    
-------------------
  {
    "test_is_prime_true_1": {
        "in": {
            "number": 101
        },
        "out": true
    },
    "test_is_prime_true_2": {
        "in": {
            "number": 11
        },
        "out": true
    },
    "test_is_prime_true_3": {
        "in": {
            "number": 13441
        },
        "out": true
    },
    "test_is_prime_true_4": {
        "in": {
            "number": 61
        },
        "out": true
    },
    "test_is_prime_false_1": {
        "in": {
            "number": 6
        },
        "out": false
    },
    "test_is_prime_false_2": {
        "in": {
            "number": 4
        },
        "out": false
    },
    "test_is_prime_false_3": {
        "in": {
            "number": 1
        },
        "out": false
    }
}</s>  Here is a test suite for the `is_prime` function:
```
{
    "is_prime_test_1": {
        "in": {
            "number": 6
        },
        "out": false
    },
    "is_prime_test_2": {
        "in": {
            "number": 101
        },
        "out": true
    },
    "is_prime_test_3": {
        "in": {
            "number": 11
        },
        "out": true
    },
    "is_prime_test_4": {
        "in": {
            "number": 13441
        },
        "out": true
    },
    "is_prime_test_5": {
        "in": {
            "number": 61
        },
        "out": true
    },
    "is_prime_test_6": {
        "in": {
            "number": 4
        },
        "out": false
    },
    "is_prime_test_7": {
        "in": {
            "number": 1
        },
        "out": false
    }
}
```
This test suite covers a variety of inputs, including prime and non-prime numbers, and checks that the function returns the expected output for each input.</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>
GOOD TEST EVALUATION RESULTS: {'is_prime_test_1': 1.0, 'is_prime_test_2': 1.0, 'is_prime_test_3': 1.0, 'is_prime_test_4': 1.0, 'is_prime_test_5': 1.0, 'is_prime_test_6': 1.0, 'is_prime_test_7': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n', 1.0)
**********************


-------------------
Final reponse: 
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
