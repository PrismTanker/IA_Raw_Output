Prompt: Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return 0
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
-------------------
  {
  "test_valid_triangle": {
    "in": {
      "a": 3,
      "b": 4,
      "c": 5
    },
    "out": 6
  },
  "test_invalid_triangle_1": {
    "in": {
      "a": 1,
      "b": 2,
      "c": 3
    },
    "out": 0
  },
  "test_invalid_triangle_2": {
    "in": {
      "a": 1,
      "b": 1,
      "c": 1
    },
    "out": 0
  },
  "test_invalid_triangle_3": {
    "in": {
      "a": 4,
      "b": 4,
      "c": 2
    },
    "out": 0
  },
  "test_invalid_triangle_4": {
    "in": {
      "a": 4,
      "b": 5,
      "c": 6
    },
    "out": 0
  }
}
</s>  {
"valid triangle": {
in: {
side1: 3,
side2: 4,
side3: 5
},
out: 6.00
},
"invalid triangle": {
in: {
side1: 3,
side2: 4,
side3: 3
},
out: 0.00
},
"equilateral triangle": {
in: {
side1: 3,
side2: 3,
side3: 3
},
out: 3.00
},
"isosceles triangle": {
in: {
side1: 3,
side2: 3,
side3: 4
},
out: 3.00
},
"not a triangle": {
in: {
side1: 3,
side2: 4,
side3: 3
},
out: 0.00
},
"side 1 is 0": {
in: {
side1: 0,
side2: 3,
side3: 4
},
out: 0.00
},
"side 2 is 0": {
in: {
side1: 3,
side2: 0,
side3: 4
},
out: 0.00
},
"side 3 is 0": {
in: {
side1: 3,
side2: 4,
side3: 0
},
out: 0.00
}
}</s>  {
"triangle-area-valid": {
in: {
a: 3,
b: 4,
c: 5
},
out: 6.00
},
"triangle-area-invalid-1": {
in: {
a: 3,
b: 4,
c: 1
},
out: 0.00
},
"triangle-area-invalid-2": {
in: {
a: 3,
b: 1,
c: 4
},
out: 0.00
},
"triangle-area-invalid-3": {
in: {
a: 1,
b: 4,
c: 3
},
out: 0.00
},
"triangle-area-invalid-4": {
in: {
a: 1,
b: 1,
c: 1
},
out: 0.00
}
}</s>  {
    "test_valid_triangle": {
        "in": {
            "a": 3,
            "b": 4,
            "c": 5
        },
        "out": 6
    },
    "test_invalid_triangle": {
        "in": {
            "a": 3,
            "b": 4,
            "c": 2
        },
        "out": 0
    },
    "test_invalid_triangle_2": {
        "in": {
            "a": 3,
            "b": 2,
            "c": 5
        },
        "out": 0
    }
}</s>  {
    "triangle_area_1": {
        "in": {
            "side_a": 3,
            "side_b": 4,
            "side_c": 5
        },
        "out": 6.00
    },
    "triangle_area_2": {
        "in": {
            "side_a": 1,
            "side_b": 1,
            "side_c": 3
        },
        "out": 0.00
    },
    "triangle_area_3": {
        "in": {
            "side_a": 3,
            "side_b": 4,
            "side_c": 2
        },
        "out": 0.00
    },
    "triangle_area_4": {
        "in": {
            "side_a": 1,
            "side_b": 1,
            "side_c": 1
        },
        "out": 0.00
    }
}</s>  Sure, here's a test suite to test the solution for the problem you described:

{
  "test1": {
    "in": {
      "side_a": 3,
      "side_b": 4,
      "side_c": 5
    },
    "out": 6.00
  },
  "test2": {
    "in": {
      "side_a": 1,
      "side_b": 1,
      "side_c": 1
    },
    "out": 0.00
  },
  "test3": {
    "in": {
      "side_a": 1,
      "side_b": 2,
      "side_c": 3
    },
    "out": 0.00
  },
  "test4": {
    "in": {
      "side_a": 5,
      "side_b": 12,
      "side_c": 13
    },
    "out": 15.00
  },
  "test5": {
    "in": {
      "side_a": 10,
      "side_b": 10,
      "side_c": 10
    },
    "out": 0.00
  }
}

This test suite includes five test cases, each with a pair of inputs (side_a, side_b, side_c) and the expected output (out). The inputs are chosen to cover a range of scenarios, including valid and invalid triangles, and triangles with different values for the sides.</s>  {
  "test_valid_triangle": {
    "in": {
      "a": 3,
      "b": 4,
      "c": 5
    },
    "out": 6.0
  },
  "test_invalid_triangle_1": {
    "in": {
      "a": 1,
      "b": 2,
      "c": 3
    },
    "out": 0.0
  },
  "test_invalid_triangle_2": {
    "in": {
      "a": 1,
      "b": 3,
      "c": 2
    },
    "out": 0.0
  },
  "test_invalid_triangle_3": {
    "in": {
      "a": 2,
      "b": 1,
      "c": 3
    },
    "out": 0.0
  },
  "test_invalid_triangle_4": {
    "in": {
      "a": 3,
      "b": 3,
      "c": 3
    },
    "out": 0.0
  }
}</s>  {
  "test_valid_triangle": {
    "in": {
      "side_a": 3,
      "side_b": 4,
      "side_c": 5
    },
    "out": 6
  },
  "test_invalid_triangle": {
    "in": {
      "side_a": 3,
      "side_b": 2,
      "side_c": 5
    },
    "out": 0
  },
  "test_invalid_triangle2": {
    "in": {
      "side_a": 3,
      "side_b": 4,
      "side_c": 1
    },
    "out": 0
  },
  "test_negative_values": {
    "in": {
      "side_a": -1,
      "side_b": -2,
      "side_c": -3
    },
    "out": 0
  },
  "test_zero_values": {
    "in": {
      "side_a": 0,
      "side_b": 0,
      "side_c": 0
    },
    "out": 0
  }
}</s>  {
"valid-triangle": {
in: {
side_a: 3,
side_b: 4,
side_c: 5
},
out: 6.00
},
"invalid-triangle": {
in: {
side_a: 3,
side_b: 2,
side_c: 1
},
out: 0.00
},
"valid-triangle-2": {
in: {
side_a: 1,
side_b: 1,
side_c: 1
},
out: 1.00
},
"invalid-triangle-2": {
in: {
side_a: 1,
side_b: 2,
side_c: 3
},
out: 0.00
}
}</s>  {
    "test1": {
        "in": {
            "a": 1,
            "b": 2,
            "c": 3
        },
        "out": 0.5
    },
    "test2": {
        "in": {
            "a": 1,
            "b": 2,
            "c": 1
        },
        "out": 0
    },
    "test3": {
        "in": {
            "a": 1,
            "b": 2,
            "c": 4
        },
        "out": 1.0
    },
    "test4": {
        "in": {
            "a": 1,
            "b": 1,
            "c": 1
        },
        "out": 0
    },
    "test5": {
        "in": {
            "a": 2,
            "b": 2,
            "c": 2
        },
        "out": 1.41
    },
    "test6": {
        "in": {
            "a": 3,
            "b": 4,
            "c": 5
        },
        "out": 6.00
    },
    "test7": {
        "in": {
            "a": 4,
            "b": 3,
            "c": 5
        },
        "out": 6.00
    },
    "test8": {
        "in": {
            "a": 5,
            "b": 12,
            "c": 13
        },
        "out": 15.00
    },
    "test9": {
        "in": {
            "a": 12,
            "b": 12,
            "c": 12
        },
        "out": 12.00
    },
    "test10": {
        "in": {
            "a": 10,
            "b": 10,
            "c": 10
        },
        "out": 30.00
    }
}</s>  {
  "test_valid_triangle": {
    "in": {
      "a": 3,
      "b": 4,
      "c": 5
    },
    "out": 6.00
  },
  "test_invalid_triangle_1": {
    "in": {
      "a": 1,
      "b": 2,
      "c": 3
    },
    "out": 0.00
  },
  "test_invalid_triangle_2": {
    "in": {
      "a": 1,
      "b": 1,
      "c": 3
    },
    "out": 0.00
  },
  "test_invalid_triangle_3": {
    "in": {
      "a": 1,
      "b": 3,
      "c": 1
    },
    "out": 0.00
  }
}

This test suite includes four test cases:

1. test_valid_triangle: This test case tests a valid triangle with sides a = 3, b = 4, and c = 5. The area of the triangle is 6.00, so the function should return 6.00.
2. test_invalid_triangle_1: This test case tests an invalid triangle with sides a = 1, b = 2, and c = 3. The sum of any two sides is less than the third side, so the function should return 0.00.
3. test_invalid_triangle_2: This test case tests an invalid triangle with sides a = 1, b = 1, and c = 3. The sum of any two sides is less than the third side, so the function should return 0.00.
4. test_invalid_triangle_3: This test case tests an invalid triangle with sides a = 1, b = 3, and c = 1. The sum of any two sides is less than the third side, so the function should return 0.00.

The JSON sample contains the following keys:

* "test_valid_triangle": The name of the test case.
* "in": The input parameters for the test case.
* "out": The expected output for the test case.

The input parameters and expected output for each test case are specified in the "in" and "out" keys, respectively. The input parameters are specified as a dictionary with the side lengths as the keys and the corresponding values. The expected output is a decimal number representing the area of the triangle rounded to 2 decimal points.</s>  {
    "test1": {
        "in": {
            "side1": 3,
            "side2": 4,
            "side3": 5
        },
        "out": 6.00
    },
    "test2": {
        "in": {
            "side1": 1,
            "side2": 1,
            "side3": 3
        },
        "out": 0.00
    },
    "test3": {
        "in": {
            "side1": 1,
            "side2": 2,
            "side3": 3
        },
        "out": 0.00
    },
    "test4": {
        "in": {
            "side1": 1,
            "side2": 2,
            "side3": 4
        },
        "out": 3.00
    },
    "test5": {
        "in": {
            "side1": 1,
            "side2": 2,
            "side3": 5
        },
        "out": 6.00
    }
}
This test suite includes the following test cases:

1. Test1: Three valid sides (3, 4, 5) should return 6.00
2. Test2: Three invalid sides (1, 1, 3) should return 0.00
3. Test3: Three invalid sides (1, 2, 3) should return 0.00
4. Test4: Three valid sides (1, 2, 4) should return 3.00
5. Test5: Three valid sides (1, 2, 5) should return 6.00

Each test case contains three parameters (side1, side2, side3) and an expected output (out). The expected output is the area of the triangle rounded to two decimal points. The test cases cover different scenarios, including valid and invalid triangles.</s>  {
    "triangle_area_valid": {
        "in": {
            "side1": 3,
            "side2": 4,
            "side3": 5
        },
        "out": 6
    },
    "triangle_area_invalid": {
        "in": {
            "side1": 1,
            "side2": 2,
            "side3": 3
        },
        "out": 0
    },
    "triangle_area_same_side": {
        "in": {
            "side1": 1,
            "side2": 1,
            "side3": 1
        },
        "out": 0
    },
    "triangle_area_negative_side": {
        "in": {
            "side1": -1,
            "side2": 2,
            "side3": 3
        },
        "out": 0
    },
    "triangle_area_zero_side": {
        "in": {
            "side1": 0,
            "side2": 2,
            "side3": 3
        },
        "out": 0
    }
}</s>  {
"valid triangle": {
in: {
side_a: 3,
side_b: 4,
side_c: 5
},
out: 6.00
},
"invalid triangle": {
in: {
side_a: 3,
side_b: 4,
side_c: 2
},
out: 0
},
"invalid triangle2": {
in: {
side_a: 3,
side_b: 2,
side_c: 5
},
out: 0
},
"invalid triangle3": {
in: {
side_a: 3,
side_b: 5,
side_c: 2
},
out: 0
},
"invalid triangle4": {
in: {
side_a: 2,
side_b: 3,
side_c: 5
},
out: 0
},
"invalid triangle5": {
in: {
side_a: 2,
side_b: 5,
side_c: 3
},
out: 0
},
"invalid triangle6": {
in: {
side_a: 5,
side_b: 3,
side_c: 2
},
out: 0
}
}</s>  {
    "triangle_area_test_1": {
        "in": {
            "side1": 3,
            "side2": 4,
            "side3": 5
        },
        "out": 6.00
    },
    "triangle_area_test_2": {
        "in": {
            "side1": 1,
            "side2": 2,
            "side3": 2
        },
        "out": 0.00
    },
    "triangle_area_test_3": {
        "in": {
            "side1": 5,
            "side2": 4,
            "side3": 3
        },
        "out": 0.00
    },
    "triangle_area_test_4": {
        "in": {
            "side1": 1,
            "side2": 1,
            "side3": 1
        },
        "out": 0.00
    },
    "triangle_area_test_5": {
        "in": {
            "side1": 10,
            "side2": 10,
            "side3": 10
        },
        "out": 30.00
    }
}</s>  {
"test1": {
in: {
side1: 3,
side2: 4,
side3: 5
},
out: 6.00
},
"test2": {
in: {
side1: 1,
side2: 1,
side3: 3
},
out: 0.00
},
"test3": {
in: {
side1: 1,
side2: 2,
side3: 3
},
out: 0.00
},
"test4": {
in: {
side1: 1,
side2: 2,
side3: 4
},
out: 0.00
},
"test5": {
in: {
side1: 1,
side2: 2,
side3: 5
},
out: 0.00
}
}</s>  {
    "triangle area calculation": {
        "in": {
            "side1": 3,
            "side2": 4,
            "side3": 5
        },
        "out": 6.00
    },
    "invalid triangle": {
        "in": {
            "side1": 1,
            "side2": 2,
            "side3": 3
        },
        "out": 0
    },
    "equilateral triangle": {
        "in": {
            "side1": 3,
            "side2": 3,
            "side3": 3
        },
        "out": 9.00
    },
    "isosceles triangle": {
        "in": {
            "side1": 3,
            "side2": 4,
            "side3": 3
        },
        "out": 6.00
    },
    "scalene triangle": {
        "in": {
            "side1": 3,
            "side2": 4,
            "side3": 5
        },
        "out": 6.00
    },
    "negative side length": {
        "in": {
            "side1": -1,
            "side2": 2,
            "side3": 3
        },
        "out": 0
    }
}</s>  Here is a sample test suite for the problem you described:
```
{
  "valid_triangle_test": {
    "in": {
      "a": 3,
      "b": 4,
      "c": 5
    },
    "out": 6
  },
  "invalid_triangle_test": {
    "in": {
      "a": 1,
      "b": 2,
      "c": 3
    },
    "out": 0
  },
  "invalid_triangle_test_2": {
    "in": {
      "a": 1,
      "b": 3,
      "c": 2
    },
    "out": 0
  },
  "invalid_triangle_test_3": {
    "in": {
      "a": 1,
      "b": 1,
      "c": 1
    },
    "out": 0
  },
  "edge_case_test": {
    "in": {
      "a": 1000000000,
      "b": 1000000000,
      "c": 1000000000
    },
    "out": 0
  }
}
```
This test suite contains 5 tests:

* `valid_triangle_test`: This test passes if the function returns the correct area of a valid triangle.
* `invalid_triangle_test`: This test passes if the function returns 0 if the three sides do not form a valid triangle.
* `invalid_triangle_test_2`: This test passes if the function returns 0 if the three sides do not form a valid triangle, regardless of the order in which they are input.
* `invalid_triangle_test_3`: This test passes if the function returns 0 if the three sides do not form a valid triangle, regardless of the order in which they are input.
* `edge_case_test`: This test passes if the function returns 0 if the three sides are very large and do not form a valid triangle.

Each test case in the test suite contains an input parameter (a, b, and c) and an expected output. The input parameters and expected outputs are specified in the JSON format as shown above.</s>  ```
def triangle_area(side_a, side_b, side_c):
    if side_a + side_b > side_c and side_b + side_c > side_a and side_a + side_c > side_b:
        s = (side_a + side_b + side_c) / 2
        area = (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5
        return round(area, 2)
    else:
        return 0
```
This code uses the formula for the area of a triangle, which is (1/2) \* base \* height. In this case, the base is the length of the longest side (side_a, side_b, or side_c) and the height is the length of the other two sides. The code checks if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If they do, it calculates the area using the formula and rounds it to 2 decimal places. Otherwise, it returns 0.</s>  ```
def triangle_area(side_a, side_b, side_c):
    if side_a + side_b > side_c and side_b + side_c > side_a and side_a + side_c > side_b:
        s = (side_a + side_b + side_c) / 2
        area = round(s * (s - side_a) * (s - side_b) * (s - side_c), 2)
        return area
    else:
        return 0
```
This code uses the formula for the area of a triangle, which is based on the formula for the semi-perimeter (s) and the product of the lengths of the three sides (s(s-a)(s-b)(s-c)). The formula is only applicable when the three sides form a valid triangle, which is determined by checking that the sum of any two sides is greater than the third side. If the three sides do not form a valid triangle, the function returns 0.</s>  ```
def triangle_area(side1, side2, side3):
    if side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2:
        s = (side1 + side2 + side3) / 2
        area = s * (s - side1) * (s - side2) * (s - side3)
        return round(area ** 0.5, 2)
    else:
        return 0
```
This code first checks if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If the triangle is valid, the code calculates the area using the formula for the area of a triangle, where s is the semi-perimeter (half of the perimeter). The area is then rounded to 2 decimal points using the round() function. If the triangle is not valid, the code returns 0.</s>  ```
def triangle_area(side_a, side_b, side_c):
    if side_a + side_b > side_c and side_b + side_c > side_a and side_a + side_c > side_b:
        s = (side_a + side_b + side_c) / 2
        area = s * (s - side_a) * (s - side_b) * (s - side_c)
        return round(area ** 0.5, 2)
    else:
        return 0
```
This code first checks if the three sides form a valid triangle by ensuring that the sum of any two sides is greater than the third side. If the sides do not form a valid triangle, the function returns 0. If the sides do form a valid triangle, the function calculates the area of the triangle using the formula for the area of a triangle: area = (base \* height) / 2. The base and height of the triangle are the lengths of the sides, and the formula is simplified to: area = (side_a + side_b + side_c) / 2. The area is then rounded to 2 decimal points using the round() function.</s>  def triangle_area(a, b, c):
    if a + b > c and b + c > a and a + c > b:
        s = (a + b + c) / 2
        return round(s * (s - a) * (s - b) * (s - c), 2)
    else:
        return 0

import math

# Test case 1:
print(triangle_area(3, 4, 5)) # Should print 6.00

# Test case 2:
print(triangle_area(1, 1, 1)) # Should print 0.00

# Test case 3:
print(triangle_area(10, 10, 10)) # Should print 72.50

# Test case 4:
print(triangle_area(100, 100, 100)) # Should print 2500.00

# Test case 5:
print(triangle_area(1000, 1000, 1000)) # Should print 500000.00</s>  ```
def triangle_area(a, b, c):
    if a + b > c and b + c > a and c + a > b:
        s = (a + b + c) / 2
        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
        return round(area, 2)
    else:
        return 0
```
This code uses the formula for the area of a triangle, which is (base * height) / 2, but in this case, we are using the semi-perimeter (s = (a + b + c) / 2) and the product of the semi-perimeter and the difference of the sides (s(s - a)(s - b)(s - c)) to find the area.

The if statement checks if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If the three sides do not form a valid triangle, the function returns 0. Otherwise, it returns the area of the triangle rounded to 2 decimal points.

Note that this code assumes that the sides of the triangle are given as positive numbers. If the sides can be negative, you will need to add additional logic to handle that case.</s>  ```
def get_triangle_area(side_a, side_b, side_c):
    if side_a + side_b > side_c and side_b + side_c > side_a and side_a + side_c > side_b:
        s = (side_a + side_b + side_c) / 2
        area = (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5
        return round(area, 2)
    else:
        return 0
```
This code uses the formula for the area of a triangle, which is given by:

area = (base * height) / 2

In this case, the base is the length of one side of the triangle, and the height is the length of the other two sides. The formula is used to calculate the area of the triangle, and the result is rounded to 2 decimal places.

The if statement checks if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If the sides do not form a valid triangle, the function returns 0. Otherwise, the function calculates the area of the triangle and returns it, rounded to 2 decimal places.</s>  ```
def triangle_area(side_a, side_b, side_c):
    if side_a + side_b > side_c and side_b + side_c > side_a and side_a + side_c > side_b:
        s = (side_a + side_b + side_c) / 2
        area = (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5
        return round(area, 2)
    else:
        return 0
```
This code uses the formula for the area of a triangle, which is (base * height) / 2. In this case, the base and height are the lengths of the sides of the triangle, and the formula is applied to the perimeter of the triangle.

The code first checks if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If the triangle is not valid, the function returns 0.

If the triangle is valid, the code calculates the area of the triangle using the formula and returns the result rounded to 2 decimal places.</s>  ```
def triangle_area(side_a, side_b, side_c):
    if side_a + side_b > side_c and side_b + side_c > side_a and side_a + side_c > side_b:
        s = (side_a + side_b + side_c) / 2
        area = (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5
        return round(area, 2)
    else:
        return 0
```
This code uses the law of cosines to find the area of a triangle. It first checks if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If the sides do form a valid triangle, the code calculates the area using the law of cosines and rounds it to 2 decimal points. If the sides do not form a valid triangle, the code returns 0.</s>  ```
def triangle_area(side1, side2, side3):
    if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:
        s = (side1 + side2 + side3) / 2
        area = s * (s - side1) * (s - side2) * (s - side3)
        return round(area ** 0.5, 2)
    else:
        return 0
```
Explanation:

This code uses the formula for the area of a triangle, which is `A = (s(s-a)(s-b)(s-c))^0.5`, where `s` is half the perimeter of the triangle. The perimeter is the sum of the lengths of all three sides.

In this code, we first check if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side. If it is not a valid triangle, we return 0.

If it is a valid triangle, we calculate the perimeter by taking the average of the three sides and then calculate the area using the formula. Finally, we round the area to 2 decimal points using the `round()` function.</s>
NEW TEST EVALUATION RESULTS: {'valid_triangle_test': 0.8888888888888888, 'invalid_triangle_test': 1.0, 'invalid_triangle_test_2': 1.0}

AUTO_GOOD_TESTS: {'valid_triangle_test': {'in': {'a': 3, 'b': 4, 'c': 5}, 'out': 6}, 'invalid_triangle_test': {'in': {'a': 1, 'b': 2, 'c': 3}, 'out': 0}, 'invalid_triangle_test_2': {'in': {'a': 1, 'b': 3, 'c': 2}, 'out': 0}}
AUTO_BAD_TESTS: {'invalid_triangle_test_3': {'in': {'a': 1, 'b': 1, 'c': 1}, 'out': 0}, 'edge_case_test': {'in': {'a': 1000000000, 'b': 1000000000, 'c': 1000000000}, 'out': 0}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'valid_triangle_test': 0.8888888888888888, 'invalid_triangle_test': 1.0, 'invalid_triangle_test_2': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return 0\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return 0\n', 1.0)
**********************


-------------------
Final reponse: 
def triangle_area(a, b, c):
    if a + b > c and b + c > a and c + a > b:
        s = (a + b + c) / 2
        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
        return round(area, 2)
    else:
        return 0
