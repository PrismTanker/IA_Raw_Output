Prompt: 
def closest_integer(value):
    """
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    """

-------------------
  Here is a test suite for the `closest_integer` function:
```
{
    "test_integer": {
        "in": {
            "value": "10"
        },
        "out": 10
    },
    "test_decimal": {
        "in": {
            "value": "15.3"
        },
        "out": 15
    },
    "test_negative_decimal": {
        "in": {
            "value": "-15.3"
        },
        "out": -15
    },
    "test_equidistant_from_two_integers": {
        "in": {
            "value": "14.5"
        },
        "out": 15
    },
    "test_equidistant_from_two_integers_negative": {
        "in": {
            "value": "-14.5"
        },
        "out": -15
    }
}
```
This test suite covers the following cases:

* `test_integer`: Tests that the function returns the correct integer when the input is an integer.
* `test_decimal`: Tests that the function returns the correct integer when the input is a decimal number.
* `test_negative_decimal`: Tests that the function returns the correct integer when the input is a negative decimal number.
* `test_equidistant_from_two_integers`: Tests that the function returns the correct integer when the input is equidistant from two integers.
* `test_equidistant_from_two_integers_negative`: Tests that the function returns the correct integer when the input is equidistant from two integers and the input is negative.</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>  
[PYTHON]
def closest_integer(value):
    return round(float(value), 0)
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'test_integer': 1.0, 'test_decimal': 1.0, 'test_negative_decimal': 1.0}

AUTO_GOOD_TESTS: {'test_integer': {'in': {'value': '10'}, 'out': 10}, 'test_decimal': {'in': {'value': '15.3'}, 'out': 15}, 'test_negative_decimal': {'in': {'value': '-15.3'}, 'out': -15}}
AUTO_BAD_TESTS: {'test_equidistant_from_two_integers': {'in': {'value': '14.5'}, 'out': 15}, 'test_equidistant_from_two_integers_negative': {'in': {'value': '-14.5'}, 'out': -15}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_integer': 1.0, 'test_decimal': 1.0, 'test_negative_decimal': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef closest_integer(value):\n    return round(float(value), 0)\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef closest_integer(value):\n    return round(float(value), 0)\n', 1.0)
**********************


-------------------
Final reponse: 
def closest_integer(value):
    return round(float(value), 0)
