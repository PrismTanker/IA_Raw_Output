Prompt: Return n-th Fibonacci numbers.
-------------------
  ```
{
    "test_fib_1": {
        "in": {
            "n": 1
        },
        "out": 1
    },
    "test_fib_2": {
        "in": {
            "n": 2
        },
        "out": 1
    },
    "test_fib_3": {
        "in": {
            "n": 3
        },
        "out": 2
    },
    "test_fib_4": {
        "in": {
            "n": 4
        },
        "out": 3
    },
    "test_fib_5": {
        "in": {
            "n": 5
        },
        "out": 5
    },
    "test_fib_6": {
        "in": {
            "n": 6
        },
        "out": 8
    },
    "test_fib_7": {
        "in": {
            "n": 7
        },
        "out": 13
    },
    "test_fib_8": {
        "in": {
            "n": 8
        },
        "out": 21
    },
    "test_fib_9": {
        "in": {
            "n": 9
        },
        "out": 34
    },
    "test_fib_10": {
        "in": {
            "n": 10
        },
        "out": 55
    }
}
```</s>  ```
def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This function uses a loop to calculate the n-th Fibonacci number. It initializes `a` and `b` to 0 and 1, respectively, and then uses a loop to calculate the next `n-1` Fibonacci numbers by adding `a` and `b` and storing the result in `a`. The final value of `a` is the `n-th` Fibonacci number.

This function is efficient for large values of `n` because it avoids the use of recursive calls, which can be slower for large values of `n`.

Here are some test cases:
```
assert fibonacci(0) == 0
assert fibonacci(1) == 1
assert fibonacci(2) == 1
assert fibonacci(3) == 2
assert fibonacci(4) == 3
assert fibonacci(5) == 5
assert fibonacci(6) == 8
assert fibonacci(7) == 13
assert fibonacci(8) == 21
assert fibonacci(9) == 34
assert fibonacci(10) == 55
```
These test cases demonstrate that the function returns the correct Fibonacci numbers for small and large values of `n`.</s>
ERROR OCCURED: 'ascii' codec can't encode character '\u221a' in position 312: ordinal not in range(128)

-------------------
Final reponse: None