Prompt: Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
-------------------
  Here's a sample JSON test suite for the problem:
```
{
    "test_valid_triangle": {
        "in": {
            "side_a": 3,
            "side_b": 4,
            "side_c": 5
        },
        "out": 6.0
    },
    "test_invalid_triangle_1": {
        "in": {
            "side_a": 2,
            "side_b": 4,
            "side_c": 6
        },
        "out": -1
    },
    "test_invalid_triangle_2": {
        "in": {
            "side_a": 4,
            "side_b": 5,
            "side_c": 6
        },
        "out": -1
    }
}
```
This test suite contains three test cases:

1. `test_valid_triangle`: This test case passes valid triangle side lengths (3, 4, 5) and checks that the function returns the correct area (6.0).
2. `test_invalid_triangle_1`: This test case passes invalid triangle side lengths (2, 4, 6) and checks that the function returns -1.
3. `test_invalid_triangle_2`: This test case passes invalid triangle side lengths (4, 5, 6) and checks that the function returns -1.

Note that the test suite is written in JSON format, which is a convenient way to store and share test data. The `in` key in each test case contains the input parameters, and the `out` key contains the expected output for that test case.</s>  ```
import math

def area_of_triangle(a, b, c):
    # Check if the triangle is valid
    if a + b > c and b + c > a and a + c > b:
        # Calculate the semiperimeter
        s = (a + b + c) / 2
        # Calculate the area
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        # Return the area rounded to 2 decimal points
        return round(area, 2)
    else:
        # Return -1 if the triangle is not valid
        return -1
```
This function takes in three sides of a triangle as input and returns the area of the triangle rounded to 2 decimal points if the triangle is valid, and -1 if it is not. The function uses the fact that the sum of any two sides of a triangle is greater than the third side to check if the triangle is valid. If the triangle is valid, it calculates the semiperimeter and uses the Heron's formula to calculate the area of the triangle. Finally, it returns the area rounded to 2 decimal points.</s>  ```
import math

def get_triangle_area(a, b, c):
    if a + b > c and b + c > a and a + c > b:
        p = (a + b + c) / 2
        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)
    else:
        return -1
```
This code uses the Heron's formula to calculate the area of the triangle. It first checks if the three sides form a valid triangle using the condition that the sum of any two sides is greater than the third side. If the triangle is valid, it calculates the semiperimeter and uses Heron's formula to calculate the area. Otherwise, it returns -1.</s>  ```
def get_triangle_area(a, b, c):
    if a + b > c and b + c > a and c + a > b:
        p = (a + b + c) / 2
        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5
        return round(area, 2)
    else:
        return -1
```
This function takes three sides of a triangle as input, `a`, `b`, and `c`, and calculates the area of the triangle using the Heron's formula if the three sides form a valid triangle. If the three sides do not form a valid triangle, the function returns -1.

The formula for the area of a triangle is given by:

area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

where `s` is the semi-perimeter of the triangle, which is half of the sum of the lengths of the three sides.

In the code, we first check if the three sides form a valid triangle by using the triangle inequality theorem. If the three sides do not form a valid triangle, we return -1. Otherwise, we calculate the semi-perimeter `p` and the area `area` using the formula. Finally, we return the rounded area to 2 decimal points.</s>
ERROR OCCURED: 'ascii' codec can't encode character '\u221a' in position 272: ordinal not in range(128)

-------------------
Final reponse: None