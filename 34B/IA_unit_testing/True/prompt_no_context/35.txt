Prompt: Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    
-------------------
  {
        "test_max_element_positive_integers": {
            "in": {
                "my_list": [1, 2, 3]
            },
            "out": 3
        },
        "test_max_element_mixed_integers": {
            "in": {
                "my_list": [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]
            },
            "out": 123
        },
        "test_max_element_negative_integers": {
            "in": {
                "my_list": [-1, -2, -3]
            },
            "out": -1
        },
        "test_max_element_empty_list": {
            "in": {
                "my_list": []
            },
            "out": None
        }
    }</s>  Here is a test suite for the `max_element` function:
```
{
    "test_empty_list": {
        "in": {
            "lst": []
        },
        "out": None
    },
    "test_single_element_list": {
        "in": {
            "lst": [1]
        },
        "out": 1
    },
    "test_sorted_list": {
        "in": {
            "lst": [1, 2, 3, 4, 5]
        },
        "out": 5
    },
    "test_unsorted_list": {
        "in": {
            "lst": [5, 3, 2, 1, 4]
        },
        "out": 5
    },
    "test_negative_numbers": {
        "in": {
            "lst": [-5, -3, -2, -1, 0, 1, 2, 3, 4, 5]
        },
        "out": 5
    },
    "test_duplicate_elements": {
        "in": {
            "lst": [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
        },
        "out": 5
    }
}
```
This test suite includes tests for an empty list, a single-element list, a sorted list, an unsorted list, a list with negative numbers, and a list with duplicate elements. Each test includes a sample input and the expected output for the `max_element` function.</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>  
[PYTHON]
def max_element(my_list):
    return max(my_list)
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'test_single_element_list': 1.0, 'test_sorted_list': 1.0, 'test_unsorted_list': 1.0, 'test_negative_numbers': 1.0, 'test_duplicate_elements': 1.0}

AUTO_GOOD_TESTS: {'test_single_element_list': {'in': {'lst': [1]}, 'out': 1}, 'test_sorted_list': {'in': {'lst': [1, 2, 3, 4, 5]}, 'out': 5}, 'test_unsorted_list': {'in': {'lst': [5, 3, 2, 1, 4]}, 'out': 5}, 'test_negative_numbers': {'in': {'lst': [-5, -3, -2, -1, 0, 1, 2, 3, 4, 5]}, 'out': 5}, 'test_duplicate_elements': {'in': {'lst': [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]}, 'out': 5}}
AUTO_BAD_TESTS: {'test_empty_list': {'in': {'lst': []}, 'out': None}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_single_element_list': 1.0, 'test_sorted_list': 1.0, 'test_unsorted_list': 1.0, 'test_negative_numbers': 1.0, 'test_duplicate_elements': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef max_element(my_list):\n    return max(my_list)\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef max_element(my_list):\n    return max(my_list)\n', 1.0)
**********************


-------------------
Final reponse: 
def max_element(my_list):
    return max(my_list)
