Prompt: from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """

-------------------
  Here is a test suite that covers the examples provided in the problem statement:
```
from hypothesis import given, strategies

def property_test(candidate_function) -> None:
    @given(strategies.integers(min_value=1), strategies.integers(min_value=1))
    def test_factorize(n, m):
        factors = candidate_function(n * m)
        assert len(factors) == 2
        assert factors[0] == n
        assert factors[1] == m

    return [test_factorize]
```
This test suite tests the following properties of the `factorize` function:

* It should return a list of prime factors of the input number in the order from smallest to largest.
* Each of the factors should be listed number of times corresponding to how many times it appears in factorization.
* The input number should be equal to the product of all factors.

The test suite uses the `hypothesis` library to generate random inputs for the `factorize` function and checks the expected properties using the `assert` statement.</s>  
[PYTHON]
def factorize(n):
    factors = []
    while n > 1:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                factors.append(i)
                n = n // i
                break
        else:
            factors.append(n)
            n = 1
    return factors
[/PYTHON]
</s>  
[PYTHON]
def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, int(n ** 0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors
[/PYTHON]
</s>  
[PYTHON]
def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, int(n ** 0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors
[/PYTHON]
</s>  
[PYTHON]
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, int(n ** 0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors
[/PYTHON]
</s>  
[PYTHON]
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, int(n ** 0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors
[/PYTHON]
</s>  
[PYTHON]
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, int(n ** 0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors
[/PYTHON]
</s>  
[PYTHON]
def factorize(n):
    factors = []
    while n > 1:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                factors.append(i)
                n = n // i
                break
        else:
            factors.append(n)
            n = 1
    return factors
[/PYTHON]
</s>  
[PYTHON]
def factorize(n: int) -> List[int]:
    factors = []
    while n > 1:
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                factors.append(i)
                n = n // i
                break
        else:
            factors.append(n)
            n = 1
    return factors
[/PYTHON]
</s>  
[PYTHON]
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, int(n ** 0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors
[/PYTHON]
</s>  
[PYTHON]
def factorize(n):
    factors = []
    while n > 1:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                factors.append(i)
                n = n // i
                break
        else:
            factors.append(n)
            n = 1
    return factors
[/PYTHON]
</s>
3600 SECONDS EXCEEDED: TIMED OUT

-------------------
Final reponse: None