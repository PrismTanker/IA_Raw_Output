Prompt:  Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    
-------------------
  ```
    from hypothesis import given, strategies
    def property_test(candidate_function) -> None:

        @given(strategies.integers())
        def property_1(n):
            factors = candidate_function(n)
            assert factors == sorted(set(factors))

        @given(strategies.integers())
        def property_2(n):
            factors = candidate_function(n)
            assert len(factors) == len(set(factors))

        @given(strategies.integers())
        def property_3(n):
            factors = candidate_function(n)
            assert n == 1
            for f in factors:
                assert f > 1

        @given(strategies.integers())
        def property_4(n):
            factors = candidate_function(n)
            assert factors == [f for f in factors if f > 1]

        return [property_1, property_2, property_3, property_4]
    ```

This test suite uses the `hypothesis` library to generate random integers and checks that the `candidate_function` returns the prime factors of the input integer in the correct order, without any duplicates, and that the length of the list of prime factors is equal to the number of unique prime factors, and that the list only contains prime numbers greater than 1.</s>
ERROR OCCURED: 'ascii' codec can't encode character '\u221a' in position 897: ordinal not in range(128)

-------------------
Final reponse: None