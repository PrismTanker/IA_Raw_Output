Prompt: from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """

-------------------
  {
    "test_xor_with_all_zeros": {
        "in": {
            "a": "0000",
            "b": "0000"
        },
        "out": "0000"
    },
    "test_xor_with_all_ones": {
        "in": {
            "a": "1111",
            "b": "1111"
        },
        "out": "0000"
    },
    "test_xor_with_different_lengths": {
        "in": {
            "a": "010",
            "b": "1100"
        },
        "out": "1000"
    },
    "test_xor_with_different_values": {
        "in": {
            "a": "0101",
            "b": "1010"
        },
        "out": "1111"
    }
}</s>  ```
{
    "test_01": {
        "in": {
            "a": "010",
            "b": "110"
        },
        "out": "100"
    },
    "test_02": {
        "in": {
            "a": "101",
            "b": "011"
        },
        "out": "110"
    },
    "test_03": {
        "in": {
            "a": "000",
            "b": "000"
        },
        "out": "000"
    },
    "test_04": {
        "in": {
            "a": "111",
            "b": "111"
        },
        "out": "000"
    },
    "test_05": {
        "in": {
            "a": "010",
            "b": "001"
        },
        "out": "011"
    },
    "test_06": {
        "in": {
            "a": "101",
            "b": "010"
        },
        "out": "111"
    },
    "test_07": {
        "in": {
            "a": "000",
            "b": "111"
        },
        "out": "111"
    },
    "test_08": {
        "in": {
            "a": "111",
            "b": "000"
        },
        "out": "111"
    },
    "test_09": {
        "in": {
            "a": "010",
            "b": "101"
        },
        "out": "111"
    },
    "test_10": {
        "in": {
            "a": "101",
            "b": "010"
        },
        "out": "111"
    }
}
```</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>  
[PYTHON]
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
[/PYTHON]
</s>
GOOD TEST EVALUATION RESULTS: {'test_01': 1.0, 'test_02': 1.0, 'test_03': 1.0, 'test_04': 1.0, 'test_05': 1.0, 'test_06': 1.0, 'test_07': 1.0, 'test_08': 1.0, 'test_09': 1.0, 'test_10': 1.0}
BEST SAMPLE ON GOOD TESTS: ("\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", 1.0)

CURRENT BEST CANDIDATE: ("\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", 1.0)
**********************


-------------------
Final reponse: 
def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
