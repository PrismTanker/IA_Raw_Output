Prompt: 
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    
-------------------
  
{
"get_row": {
"in": {
"lst": [
[1,2,3,4,5,6],
[1,2,3,4,1,6],
[1,2,3,4,5,1]
],
"x": 1
},
"out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
},
"get_row": {
"in": {
"lst": [],
"x": 1
},
"out": []
},
"get_row": {
"in": {
"lst": [
[],
[1],
[1, 2, 3]
],
"x": 3
},
"out": [(2, 2)]
}
}</s>  
    {
        "test_get_row": {
            "in": {
                "lst": [
                    [1,2,3,4,5,6],
                    [1,2,3,4,1,6],
                    [1,2,3,4,5,1]
                ],
                "x": 1
            },
            "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
        },
        "test_get_row_empty_list": {
            "in": {
                "lst": [],
                "x": 1
            },
            "out": []
        },
        "test_get_row_single_row": {
            "in": {
                "lst": [
                    [1,2,3,4,5,6]
                ],
                "x": 1
            },
            "out": [(0, 0)]
        },
        "test_get_row_multiple_columns": {
            "in": {
                "lst": [
                    [1,2,3,4,5,6],
                    [1,2,3,4,1,6],
                    [1,2,3,4,5,1]
                ],
                "x": 3
            },
            "out": [(0, 2), (1, 2), (2, 2)]
        },
        "test_get_row_multiple_rows": {
            "in": {
                "lst": [
                    [1,2,3,4,5,6],
                    [1,2,3,4,1,6],
                    [1,2,3,4,5,1]
                ],
                "x": 2
            },
            "out": [(0, 1), (1, 1), (2, 1)]
        },
        "test_get_row_negative_value": {
            "in": {
                "lst": [
                    [1,2,3,4,5,6],
                    [1,2,3,4,1,6],
                    [1,2,3,4,5,1]
                ],
                "x": -1
            },
            "out": []
        }
    }</s>  
{
TESTNAME: "test_get_row",
in: {
lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],
x: 1
},
out: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
},
{
TESTNAME: "test_get_row_empty_list",
in: {
lst: [],
x: 1
},
out: []
},
{
TESTNAME: "test_get_row_single_column",
in: {
lst: [[], [1], [1, 2, 3]],
x: 3
},
out: [(2, 2)]
}
}</s>  
    Here is a test suite for the given problem:
    {
        "get_row": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 1
            },
            "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
        },
        "get_row_empty_list": {
            "in": {
                "lst": [],
                "x": 1
            },
            "out": []
        },
        "get_row_single_row": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6]
                ],
                "x": 1
            },
            "out": [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]
        },
        "get_row_single_column": {
            "in": {
                "lst": [
                    [1],
                    [2],
                    [3],
                    [4],
                    [5],
                    [6]
                ],
                "x": 1
            },
            "out": [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
        },
        "get_row_different_length_rows": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 3
            },
            "out": [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
        },
        "get_row_different_length_columns": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 4
            },
            "out": [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
        },
        "get_row_negative_x": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": -1
            },
            "out": []
        },
        "get_row_x_greater_than_number_of_columns": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 7
            },
            "out": []
        },
        "get_row_x_greater_than_number_of_rows": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 4
            },
            "out": []
        }
    }</s>  
    {
    "get_row": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    },
    "get_row_empty_list": {
        "in": {
            "lst": [],
            "x": 1
        },
        "out": []
    },
    "get_row_single_row": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6]
            ],
            "x": 1
        },
        "out": [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]
    },
    "get_row_different_columns": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1],
                [1, 2, 3, 4, 5, 6]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, 0)]
    },
    "get_row_different_columns_and_rows": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1],
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 5, 6]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, 0), (4, 5), (4, 4), (4, 3), (4, 2), (4, 1), (4, 0), (5, 5), (5, 4), (5, 3), (5, 2), (5, 1), (5, 0)]
    }
}</s>  
{
TESTNAME: "get_row_test",
in: {
lst: [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]],
x: 1
},
out: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
},
{
TESTNAME: "get_row_test",
in: {
lst: [],
x: 1
},
out: []
},
{
TESTNAME: "get_row_test",
in: {
lst: [[], [1], [1, 2, 3]],
x: 3
},
out: [(2, 2)]
}
}</s>  
   Here is a test suite for the function `get_row`:
```json
{
    "get_row": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    },
    "get_row_empty_list": {
        "in": {
            "lst": [],
            "x": 1
        },
        "out": []
    },
    "get_row_single_element": {
        "in": {
            "lst": [[1]],
            "x": 1
        },
        "out": [(0, 0)]
    },
    "get_row_multiple_elements": {
        "in": {
            "lst": [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],
            "x": 3
        },
        "out": [(0, 2), (1, 2), (2, 2)]
    }
}
```
This test suite covers several test cases, including:

* A list of non-empty lists, with a valid `x` value.
* An empty list, with a valid `x` value.
* A list of single element, with a valid `x` value.
* A list of multiple elements, with a valid `x` value.

Each test case has a unique name, and the input parameters and expected output are clearly defined. This will make it easy to run the tests and verify the correctness of the function.</s>  
   Here is a sample test suite for the problem:
   {
       "test_1": {
           "in": {
               "lst": [
                   [1, 2, 3, 4, 5, 6],
                   [1, 2, 3, 4, 1, 6],
                   [1, 2, 3, 4, 5, 1]
               ],
               "x": 1
           },
           "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
       },
       "test_2": {
           "in": {
               "lst": [],
               "x": 1
           },
           "out": []
       },
       "test_3": {
           "in": {
               "lst": [
                   [],
                   [1],
                   [1, 2, 3]
               ],
               "x": 3
           },
           "out": [(2, 2)]
       }
   }</s>  
{
"get_row": {
"in": {
"lst": [
[1, 2, 3, 4, 5, 6],
[1, 2, 3, 4, 1, 6],
[1, 2, 3, 4, 5, 1]
],
"x": 1
},
"out": [
(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)
]
},
"get_row_empty_list": {
"in": {
"lst": [],
"x": 1
},
"out": []
},
"get_row_single_column": {
"in": {
"lst": [
[1],
[1],
[1, 2, 3]
],
"x": 3
},
"out": [
(2, 2)
]
}
}</s>  
   Here's a test suite in JSON format that covers the given examples and some additional cases:
```json
{
    "get_row": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    },
    "get_row_empty_list": {
        "in": {
            "lst": [],
            "x": 1
        },
        "out": []
    },
    "get_row_single_row": {
        "in": {
            "lst": [
                [1, 2, 3]
            ],
            "x": 3
        },
        "out": [(0, 2)]
    },
    "get_row_single_column": {
        "in": {
            "lst": [
                [1],
                [2],
                [3]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 0), (2, 0)]
    },
    "get_row_multiple_columns": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5],
                [1, 2, 3, 4, 1],
                [1, 2, 3, 4, 5]
            ],
            "x": 3
        },
        "out": [(0, 2), (1, 2), (2, 2)]
    },
    "get_row_negative_x": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": -1
        },
        "out": []
    },
    "get_row_x_greater_than_columns": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": 7
        },
        "out": []
    }
}
```
Please note that this test suite is just an example and may not cover all the possible edge cases. It's important to write more test cases to ensure the function works correctly in all scenarios.</s>  
[PYTHON]
import json

def get_row_test_suite():
    input_data = [
        ([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1, [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]),
        ([], 1, []),
        ([[], [1], [1, 2, 3]], 3, [(2, 2)])
    ]
    test_suite = {
        "get_row": {
            "in": {
                "lst": [],
                "x": 0
            },
            "out": []
        }
    }
    for i, (lst, x, expected) in enumerate(input_data):
        test_suite["get_row"]["in"]["lst"] = lst
        test_suite["get_row"]["in"]["x"] = x
        test_suite["get_row"]["out"] = expected
        test_suite["get_row"]["out"] = sorted(test_suite["get_row"]["out"], key=lambda x: x[0])
        test_suite["get_row"]["out"] = sorted(test_suite["get_row"]["out"], key=lambda x: x[1], reverse=True)
    return test_suite
[/PYTHON]
</s>  
   Here is a possible test suite for the problem:
   ```
   {
       "test_get_row_1": {
           "in": {
               "lst": [
                   [1, 2, 3, 4, 5, 6],
                   [1, 2, 3, 4, 1, 6],
                   [1, 2, 3, 4, 5, 1]
               ],
               "x": 1
           },
           "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
       },
       "test_get_row_2": {
           "in": {
               "lst": [],
               "x": 1
           },
           "out": []
       },
       "test_get_row_3": {
           "in": {
               "lst": [
                   [],
                   [1],
                   [1, 2, 3]
               ],
               "x": 3
           },
           "out": [(2, 2)]
       }
   }
   ```
   This test suite includes three tests:

1. `test_get_row_1`: This test checks that the function returns the correct coordinates when the input list contains multiple rows and the value to find is present in multiple rows.
2. `test_get_row_2`: This test checks that the function returns an empty list when the input list is empty.
3. `test_get_row_3`: This test checks that the function returns the correct coordinates when the input list contains multiple rows and the value to find is present in only one row.</s>  
    Here is a test suite for the given problem:
    {
        "get_row": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 1
            },
            "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
        },
        "get_row_empty_list": {
            "in": {
                "lst": [],
                "x": 1
            },
            "out": []
        },
        "get_row_single_row": {
            "in": {
                "lst": [[1, 2, 3, 4, 5, 6]],
                "x": 1
            },
            "out": [(0, 4)]
        },
        "get_row_single_column": {
            "in": {
                "lst": [[1], [2], [3]],
                "x": 3
            },
            "out": [(2, 0)]
        },
        "get_row_different_columns": {
            "in": {
                "lst": [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],
                "x": 1
            },
            "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
        }
    }</s>  
   {
    "get_row": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    },
    "get_row_empty": {
        "in": {
            "lst": [],
            "x": 1
        },
        "out": []
    },
    "get_row_single_element": {
        "in": {
            "lst": [[1]],
            "x": 1
        },
        "out": [(0, 0)]
    },
    "get_row_multiple_rows": {
        "in": {
            "lst": [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]
            ],
            "x": 3
        },
        "out": [(0, 2), (1, 1), (2, 0)]
    },
    "get_row_multiple_columns": {
        "in": {
            "lst": [
                [1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]
            ],
            "x": 4
        },
        "out": [(0, 3), (1, 2), (2, 1), (2, 0)]
    },
    "get_row_duplicate_elements": {
        "in": {
            "lst": [
                [1, 2, 3, 4, 5, 6],
                [1, 2, 3, 4, 1, 6],
                [1, 2, 3, 4, 5, 1]
            ],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    }
}</s>  
{
"get_row": {
"in": {
"lst": [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],
"x": 1
},
"out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
},
"get_row_empty_list": {
"in": {
"lst": [],
"x": 1
},
"out": []
},
"get_row_single_row": {
"in": {
"lst": [[], [1], [1, 2, 3]],
"x": 3
},
"out": [(2, 2)]
}
}</s>  
    Here is a test suite for the given problem:
    {
        "get_row": {
            "in": {
                "lst": [
                    [1, 2, 3, 4, 5, 6],
                    [1, 2, 3, 4, 1, 6],
                    [1, 2, 3, 4, 5, 1]
                ],
                "x": 1
            },
            "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
        },
        "get_row_empty_list": {
            "in": {
                "lst": [],
                "x": 1
            },
            "out": []
        },
        "get_row_single_element": {
            "in": {
                "lst": [[1]],
                "x": 1
            },
            "out": [(0, 0)]
        },
        "get_row_multiple_elements": {
            "in": {
                "lst": [[1, 2, 3], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],
                "x": 3
            },
            "out": [(0, 2), (1, 2), (2, 2)]
        }
    }</s>  
{
"test_get_row_1": {
"in": {
"lst": [
[1, 2, 3, 4, 5, 6],
[1, 2, 3, 4, 1, 6],
[1, 2, 3, 4, 5, 1]
],
"x": 1
},
"out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
},
"test_get_row_2": {
"in": {
"lst": [],
"x": 1
},
"out": []
},
"test_get_row_3": {
"in": {
"lst": [
[],
[1],
[1, 2, 3]
],
"x": 3
},
"out": [(2, 2)]
}
}</s>  
[PYTHON]
import json

def get_row(lst, x):
    result = []
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if lst[i][j] == x:
                result.append((i, j))
    return sorted(result)


test_cases = {
    "TEST 1": {
        "in": {
            "lst": [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]],
            "x": 1
        },
        "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    },
    "TEST 2": {
        "in": {
            "lst": [],
            "x": 1
        },
        "out": []
    },
    "TEST 3": {
        "in": {
            "lst": [[], [1], [1, 2, 3]],
            "x": 3
        },
        "out": [(2, 2)]
    }
}

for test in test_cases:
    result = get_row(**test_cases[test]["in"])
    assert result == test_cases[test]["out"], f"Failed: {test}"

print("All tests passed!")
[/PYTHON]
</s>  
[PYTHON]
{
  "TEST 1": {
    "in": {
      "lst": [
        [1, 2, 3, 4, 5, 6],
        [1, 2, 3, 4, 1, 6],
        [1, 2, 3, 4, 5, 1]
      ],
      "x": 1
    },
    "out": [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
  },
  "TEST 2": {
    "in": {
      "lst": [],
      "x": 1
    },
    "out": []
  },
  "TEST 3": {
    "in": {
      "lst": [
        [],
        [1],
        [1, 2, 3]
      ],
      "x": 3
    },
    "out": [(2, 2)]
  }
}
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>  
[PYTHON]
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
[/PYTHON]
</s>
GOOD TEST EVALUATION RESULTS: {'TEST 1': 1.0, 'TEST 2': 1.0, 'TEST 3': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n', 1.0)
**********************


-------------------
Final reponse: 
def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    return sorted(result, key=lambda x: (x[0], -x[1]))
