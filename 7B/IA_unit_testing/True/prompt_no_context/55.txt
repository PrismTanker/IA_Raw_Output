Prompt: Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    
-------------------
  {
    "fib_test1": {
        "in": {
            "n": 10
        },
        "out": 55
    },
    "fib_test2": {
        "in": {
            "n": 1
        },
        "out": 1
    },
    "fib_test3": {
        "in": {
            "n": 8
        },
        "out": 21
    }
}</s>  {
    "fibonacci_1": {
        "in": {
            "n": 1
        },
        "out": 1
    },
    "fibonacci_2": {
        "in": {
            "n": 8
        },
        "out": 21
    },
    "fibonacci_3": {
        "in": {
            "n": 10
        },
        "out": 55
    }
}</s>  {
    "fibonacci_test_1": {
        "in": {
            "n": 10
        },
        "out": 55
    },
    "fibonacci_test_2": {
        "in": {
            "n": 1
        },
        "out": 1
    },
    "fibonacci_test_3": {
        "in": {
            "n": 8
        },
        "out": 21
    }
}</s>  Here is a JSON sample that represents a test suite to test a future solution for the problem of returning the n-th Fibonacci number:
```
{
  "test_fib_1": {
    "in": {
      "n": 10
    },
    "out": 55
  },
  "test_fib_2": {
    "in": {
      "n": 1
    },
    "out": 1
  },
  "test_fib_3": {
    "in": {
      "n": 8
    },
    "out": 21
  }
}
```
In this sample, each test is identified by a unique name, such as "test_fib_1", "test_fib_2", and "test_fib_3". Each test has an "in" parameter that specifies the input to the function being tested, and an "out" parameter that specifies the expected output. In this case, the input is the value of the "n" parameter, and the expected output is the n-th Fibonacci number.

This JSON sample can be used to test a future solution to the problem of returning the n-th Fibonacci number. The solution should be able to take the "n" parameter as input and return the corresponding Fibonacci number as output. The test suite can be used to verify that the solution produces the correct output for various inputs.</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```
This code uses a recursive approach to calculate the n-th Fibonacci number. The function checks if the input `n` is less than or equal to 1, in which case the answer is simply `n`. Otherwise, the function calls itself with `n-1` and `n-2` as inputs to calculate the previous two Fibonacci numbers and adds them together to get the current Fibonacci number.</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```
This code uses recursion to calculate the n-th Fibonacci number. The base case is when n is 1 or 2, in which case the answer is 1. Otherwise, the answer is the sum of the (n-1)st and (n-2)nd Fibonacci numbers. The time complexity of this code is O(2^n), which is exponential in the input size.</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
    ```
This code uses a recursive approach to calculate the n-th Fibonacci number. The base case is when n is 1 or 2, in which case the answer is 1. Otherwise, the answer is the sum of the previous two Fibonacci numbers. The time complexity of this algorithm is O(2^n), which can be improved using the closed-form formula for Fibonacci numbers.

Alternatively, you can use a loop to calculate the Fibonacci numbers:
```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code uses a loop to iterate over the range of values from 0 to n-1, and updates the values of a and b accordingly. The time complexity of this algorithm is O(n), which is faster than the recursive approach for large values of n.</s>  def fib(n):
      if n <= 1:
        return n
      else:
        return fib(n-1) + fib(n-2)</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code uses a recursive approach to calculate the n-th Fibonacci number. The base case is when n = 1, in which case the answer is 1. For larger values of n, the code uses a loop to calculate the previous two Fibonacci numbers and then adds them to get the current Fibonacci number.</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
    ```</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```
This code uses the recursive definition of the Fibonacci sequence to calculate the n-th Fibonacci number. The base case is when n is 1 or 2, in which case the answer is 1. Otherwise, the answer is the sum of the previous two Fibonacci numbers.

The time complexity of this code is O(2^n), which is exponential. However, it can be optimized using a dynamic programming approach to reduce the time complexity to O(n).

```
def fib(n):
    if n <= 1:
        return n
    else:
        memo = [0] * (n+1)
        memo[0] = 0
        memo[1] = 1
        for i in range(2, n+1):
            memo[i] = memo[i-1] + memo[i-2]
        return memo[n]
```
This code uses a memoization technique to store the values of the Fibonacci sequence in a list. The time complexity is reduced to O(n) because the values of the Fibonacci sequence are only calculated once for each value of n.</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```
This code uses the recursive approach to calculate the n-th Fibonacci number. The function first checks if the input `n` is less than or equal to 1, in which case it returns `n` directly. Otherwise, it calculates the n-th Fibonacci number by adding the (n-1)th and (n-2)th Fibonacci numbers and returns the result.

The time complexity of this code is O(2^n), which means that the number of recursive calls grows exponentially with the input size. However, the space complexity is O(n), since the function uses a recursive call stack to store the intermediate values.

It's worth noting that this code can be optimized for better performance by using a memoization technique, which involves storing the calculated values in a dictionary to avoid recalculating them for the same input. Here's an optimized version of the code:
```
def fib(n, memo=None):
    if memo is None:
        memo = {}
    if n in memo:
        return memo[n]
    if n <= 1:
        result = n
    else:
        result = fib(n-1, memo) + fib(n-2, memo)
    memo[n] = result
    return result
```
This optimized version of the code uses a memoization dictionary to store the calculated values for each input `n`. The function first checks if the input `n` is already in the memoization dictionary, in which case it returns the corresponding value. Otherwise, it calculates the n-th Fibonacci number by adding the (n-1)th and (n-2)th Fibonacci numbers and stores the result in the memoization dictionary before returning it.

The time complexity of this optimized version of the code is O(n), since the function uses a memoization dictionary to store the calculated values and avoids unnecessary recalculations. However, the space complexity is still O(n), since the memoization dictionary stores the calculated values for all input sizes.</s>  ```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```
This code uses recursion to calculate the n-th Fibonacci number. The base case is when n is 1 or 0, in which case the answer is simply n. Otherwise, the answer is the sum of the Fibonacci numbers for n-1 and n-2. The recursive calls are made until the base case is reached, at which point the answer is returned.

Note that this code uses the built-in `sum` function to calculate the sum of two numbers. If you don't want to use this function, you can rewrite the code as follows:
```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```</s>  ```
  def fib(n):
      if n <= 1:
          return n
      else:
          return fib(n-1) + fib(n-2)
  ```</s>
NEW TEST EVALUATION RESULTS: {'test_fib_2': 1.0, 'test_fib_1': 0.125, 'test_fib_3': 0.125}

AUTO_GOOD_TESTS: {'test_fib_2': {'in': {'n': 1}, 'out': 1}}
AUTO_BAD_TESTS: {'test_fib_1': {'in': {'n': 10}, 'out': 55}, 'test_fib_3': {'in': {'n': 8}, 'out': 21}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_fib_2': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n', 1.0)
**********************

  {'test_fib_1': {'in': {'n': 1}, 'out': 1},
'test_fib_2': {'in': {'n': 2}, 'out': 1},
'test_fib_3': {'in': {'n': 3}, 'out': 2},
'test_fib_4': {'in': {'n': 4}, 'out': 3},
'test_fib_5': {'in': {'n': 5}, 'out': 5},
'test_fib_6': {'in': {'n': 6}, 'out': 8},
'test_fib_7': {'in': {'n': 7}, 'out': 13},
'test_fib_8': {'in': {'n': 8}, 'out': 21},
'test_fib_9': {'in': {'n': 9}, 'out': 34},
'test_fib_10': {'in': {'n': 10}, 'out': 55},
}</s>  Here is an extended test suite for the Fibonacci function:
{
    'test_fib_1': {
        'in': {
            'n': 1
        },
        'out': 1
    },
    'test_fib_2': {
        'in': {
            'n': 2
        },
        'out': 1
    },
    'test_fib_3': {
        'in': {
            'n': 3
        },
        'out': 2
    },
    'test_fib_4': {
        'in': {
            'n': 4
        },
        'out': 3
    },
    'test_fib_5': {
        'in': {
            'n': 5
        },
        'out': 5
    },
    'test_fib_6': {
        'in': {
            'n': 6
        },
        'out': 8
    },
    'test_fib_7': {
        'in': {
            'n': 7
        },
        'out': 13
    },
    'test_fib_8': {
        'in': {
            'n': 8
        },
        'out': 21
    },
    'test_fib_9': {
        'in': {
            'n': 9
        },
        'out': 34
    },
    'test_fib_10': {
        'in': {
            'n': 10
        },
        'out': 55
    },
    'test_fib_11': {
        'in': {
            'n': 11
        },
        'out': 89
    },
    'test_fib_12': {
        'in': {
            'n': 12
        },
        'out': 144
    },
    'test_fib_13': {
        'in': {
            'n': 13
        },
        'out': 233
    },
    'test_fib_14': {
        'in': {
            'n': 14
        },
        'out': 377
    },
    'test_fib_15': {
        'in': {
            'n': 15
        },
        'out': 610
    },
    'test_fib_16': {
        'in': {
            'n': 16
        },
        'out': 987
    },
    'test_fib_17': {
        'in': {
            'n': 17
        },
        'out': 1597
    },
    'test_fib_18': {
        'in': {
            'n': 18
        },
        'out': 2584
    },
    'test_fib_19': {
        'in': {
            'n': 19
        },
        'out': 4181
    },
    'test_fib_20': {
        'in': {
            'n': 20
        },
        'out': 6765
    }
}
This test suite covers the first 20 Fibonacci numbers, with inputs ranging from 1 to 20. It also covers the edge cases of n=1 and n=2, which are the base cases for the Fibonacci sequence.</s>  Here is an extended test suite for the function that computes the n-th Fibonacci number:

{
    'test_fib_1': {
        'in': {
            'n': 1
        },
        'out': 1
    },
    'test_fib_2': {
        'in': {
            'n': 2
        },
        'out': 1
    },
    'test_fib_3': {
        'in': {
            'n': 3
        },
        'out': 2
    },
    'test_fib_4': {
        'in': {
            'n': 4
        },
        'out': 3
    },
    'test_fib_5': {
        'in': {
            'n': 5
        },
        'out': 5
    },
    'test_fib_6': {
        'in': {
            'n': 6
        },
        'out': 8
    },
    'test_fib_7': {
        'in': {
            'n': 7
        },
        'out': 13
    },
    'test_fib_8': {
        'in': {
            'n': 8
        },
        'out': 21
    },
    'test_fib_9': {
        'in': {
            'n': 9
        },
        'out': 34
    },
    'test_fib_10': {
        'in': {
            'n': 10
        },
        'out': 55
    },
    'test_fib_11': {
        'in': {
            'n': 11
        },
        'out': 89
    },
    'test_fib_12': {
        'in': {
            'n': 12
        },
        'out': 144
    },
    'test_fib_13': {
        'in': {
            'n': 13
        },
        'out': 233
    },
    'test_fib_14': {
        'in': {
            'n': 14
        },
        'out': 377
    },
    'test_fib_15': {
        'in': {
            'n': 15
        },
        'out': 610
    },
    'test_fib_16': {
        'in': {
            'n': 16
        },
        'out': 987
    },
    'test_fib_17': {
        'in': {
            'n': 17
        },
        'out': 1597
    },
    'test_fib_18': {
        'in': {
            'n': 18
        },
        'out': 2584
    },
    'test_fib_19': {
        'in': {
            'n': 19
        },
        'out': 4181
    },
    'test_fib_20': {
        'in': {
            'n': 20
        },
        'out': 6765
    }
}

This test suite includes 20 test cases, covering Fibonacci numbers up to 20. Each test case has a parameter `n` with a value between 1 and 20, and the expected output is the n-th Fibonacci number.</s>  {
'test_fib_3': {'in': {'n': 3}, 'out': 2},
'test_fib_5': {'in': {'n': 5}, 'out': 5},
'test_fib_8': {'in': {'n': 8}, 'out': 21},
'test_fib_13': {'in': {'n': 13}, 'out': 89},
'test_fib_21': {'in': {'n': 21}, 'out': 144},
'test_fib_34': {'in': {'n': 34}, 'out': 570},
'test_fib_55': {'in': {'n': 55}, 'out': 1836311903}
}</s>  Here is an extended test suite for the `fib` function:
```
{
  "test_fib_1": {
    "in": {
      "n": 1
    },
    "out": 1
  },
  "test_fib_2": {
    "in": {
      "n": 2
    },
    "out": 1
  },
  "test_fib_3": {
    "in": {
      "n": 3
    },
    "out": 2
  },
  "test_fib_4": {
    "in": {
      "n": 4
    },
    "out": 3
  },
  "test_fib_5": {
    "in": {
      "n": 5
    },
    "out": 5
  },
  "test_fib_6": {
    "in": {
      "n": 6
    },
    "out": 8
  },
  "test_fib_7": {
    "in": {
      "n": 7
    },
    "out": 13
  },
  "test_fib_8": {
    "in": {
      "n": 8
    },
    "out": 21
  },
  "test_fib_9": {
    "in": {
      "n": 9
    },
    "out": 34
  },
  "test_fib_10": {
    "in": {
      "n": 10
    },
    "out": 55
  },
  "test_fib_11": {
    "in": {
      "n": 11
    },
    "out": 89
  },
  "test_fib_12": {
    "in": {
      "n": 12
    },
    "out": 144
  },
  "test_fib_13": {
    "in": {
      "n": 13
    },
    "out": 233
  },
  "test_fib_14": {
    "in": {
      "n": 14
    },
    "out": 377
  },
  "test_fib_15": {
    "in": {
      "n": 15
    },
    "out": 610
  },
  "test_fib_16": {
    "in": {
      "n": 16
    },
    "out": 987
  },
  "test_fib_17": {
    "in": {
      "n": 17
    },
    "out": 1597
  },
  "test_fib_18": {
    "in": {
      "n": 18
    },
    "out": 2584
  },
  "test_fib_19": {
    "in": {
      "n": 19
    },
    "out": 4181
  },
  "test_fib_20": {
    "in": {
      "n": 20
    },
    "out": 6765
  }
}
```
This test suite covers the first 20 Fibonacci numbers, and it includes inputs for `n` ranging from 1 to 20. It also includes expected outputs for each input.</s>  Here is the refined code:
```
def fib(n):
    a, b = 0, 1
    if n == 1:
        return 1
    for i in range(n-1):
        a, b = b, a + b
    return a
```
This code should pass all test cases and solve the problem correctly. The main change is that we check if `n == 1` before starting the loop. This is because the Fibonacci sequence starts with `0` and `1`, so the first two numbers are `0` and `1`. Therefore, we should return `1` for `n == 1` and start the loop only when `n > 1`.

The second change is that we start the loop from `n-1` instead of `n`. This is because we want to calculate the `n-1`th Fibonacci number, which is the number that comes before `n`. Therefore, we need to start from `n-1` and increment the loop by 1 for each iteration.

The third change is that we use `return a` instead of `return b` at the end of the loop. This is because we want to return the final value of `a`, which is the `n-1`th Fibonacci number.

Overall, this refined code should solve the problem and pass all test cases.</s>  ```
def fib(n):
    if n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
```
This code uses the recursive approach to find the n-th Fibonacci number. The base case is when n is 1, in which case the output is 1. For larger values of n, the function calls itself with n-1 and n-2 as arguments, and adds the results together to get the final output.

The time complexity of this solution is O(2^n), which is much slower than the O(n) time complexity of the iterative solution. However, this recursive solution is more straightforward to understand and implement.</s>  Sure, here's a refined version of the `fib` function that satisfies the given input-output pairs:
```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This function uses the same logic as the previous version, but it has the following improvements:

* It uses a more concise and readable syntax for the loop.
* It uses the `range` function to generate the sequence of numbers up to `n`, which makes the code more efficient and easier to read.
* It uses the `a, b = b, a + b` assignment statement to update the values of `a` and `b` in a single step, which makes the code more concise and easier to understand.

Overall, this refined version of the `fib` function should be more efficient and easier to read than the previous version.</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code sample does not correctly solve the problem as it does not handle the base cases. The function should return `0` for `n=0` and `1` for `n=1`.

Here's a corrected version of the function:
```
def fib(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    a, b = 0, 1
    for i in range(n-2):
        a, b = b, a + b
    return b
```</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code sample does not correctly solve the problem because it returns the value of the 'a' variable after the loop ends. To return the n-th Fibonacci number, we need to return the value of 'b' after the loop ends.

Here is the corrected code:
```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return b
```
This code correctly solves the problem because it returns the value of the 'b' variable after the loop ends, which is the n-th Fibonacci number.</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a
```

Explanation:

The Fibonacci sequence is a well-known series of numbers in which each number is the sum of the two preceding numbers. The first two numbers in the sequence are 0 and 1, and each subsequent number is the sum of the previous two. To calculate the nth Fibonacci number, we need to calculate the sum of the (n-1)th and (n-2)th Fibonacci numbers.

We can use a recursive approach to solve this problem, where we define a function that takes an integer n as input and returns the nth Fibonacci number. The base case is when n is 0 or 1, in which case the function returns 0 or 1, respectively. Otherwise, the function calculates the sum of the (n-1)th and (n-2)th Fibonacci numbers and returns the result.

Here is the modified code:

```
def fib(n):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)
```

This code satisfies the input-output pairs you provided in the JSON snippet.</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code is incorrect. The correct implementation of the Fibonacci sequence is:
```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return b
```
This code will correctly return the n-th Fibonacci number.</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code does not solve the problem because it does not handle the case when n is equal to 1.

Here's a corrected version of the code:
```
def fib(n):
    if n == 1:
        return 1
    a, b = 0, 1
    for i in range(n-1):
        a, b = b, a + b
    return b
```
This code correctly handles the case when n is equal to 1.</s>  Sure, here's a refined version of your code that solves the problem:
```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code is more efficient than your original solution because it avoids the unnecessary computation of the previous values of `a` and `b`.

Here's a more concise solution using a recursive approach:
```
def fib(n):
    if n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
```
This code is more efficient because it avoids the need for a loop and reduces the number of recursive calls.</s>  ```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code sample does not fully solve the problem because it only calculates the Fibonacci sequence up to the nth number. For example, if the input is 10, the output should be 55, but this code only calculates the first 10 numbers of the Fibonacci sequence, which is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and 55.
To fix this issue, we can modify the code to calculate the Fibonacci sequence up to the nth number. Here is the corrected code:
```
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
```
This code should pass the test cases you provided.</s>
NEW TEST EVALUATION RESULTS: {'test_fib_1': 0.9, 'test_fib_2': 0.9, 'test_fib_3': 0.7, 'test_fib_4': 0.7, 'test_fib_5': 0.7, 'test_fib_6': 0.7, 'test_fib_7': 0.7, 'test_fib_8': 0.7, 'test_fib_9': 0.7, 'test_fib_10': 0.7, 'test_fib_11': 0.7, 'test_fib_12': 0.7, 'test_fib_13': 0.7, 'test_fib_14': 0.7, 'test_fib_15': 0.7, 'test_fib_16': 0.7, 'test_fib_17': 0.7, 'test_fib_18': 0.7, 'test_fib_19': 0.7, 'test_fib_20': 0.7}

AUTO_GOOD_TESTS: {'test_fib_1': {'in': {'n': 1}, 'out': 1}, 'test_fib_2': {'in': {'n': 2}, 'out': 1}, 'test_fib_3': {'in': {'n': 3}, 'out': 2}, 'test_fib_4': {'in': {'n': 4}, 'out': 3}, 'test_fib_5': {'in': {'n': 5}, 'out': 5}, 'test_fib_6': {'in': {'n': 6}, 'out': 8}, 'test_fib_7': {'in': {'n': 7}, 'out': 13}, 'test_fib_8': {'in': {'n': 8}, 'out': 21}, 'test_fib_9': {'in': {'n': 9}, 'out': 34}, 'test_fib_10': {'in': {'n': 10}, 'out': 55}, 'test_fib_11': {'in': {'n': 11}, 'out': 89}, 'test_fib_12': {'in': {'n': 12}, 'out': 144}, 'test_fib_13': {'in': {'n': 13}, 'out': 233}, 'test_fib_14': {'in': {'n': 14}, 'out': 377}, 'test_fib_15': {'in': {'n': 15}, 'out': 610}, 'test_fib_16': {'in': {'n': 16}, 'out': 987}, 'test_fib_17': {'in': {'n': 17}, 'out': 1597}, 'test_fib_18': {'in': {'n': 18}, 'out': 2584}, 'test_fib_19': {'in': {'n': 19}, 'out': 4181}, 'test_fib_20': {'in': {'n': 20}, 'out': 6765}}
AUTO_BAD_TESTS: {}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_fib_2': 0.9, 'test_fib_1': 0.9, 'test_fib_2_new': 0.9, 'test_fib_3': 0.7, 'test_fib_4': 0.7, 'test_fib_5': 0.7, 'test_fib_6': 0.7, 'test_fib_7': 0.7, 'test_fib_8': 0.7, 'test_fib_9': 0.7, 'test_fib_10': 0.7, 'test_fib_11': 0.7, 'test_fib_12': 0.7, 'test_fib_13': 0.7, 'test_fib_14': 0.7, 'test_fib_15': 0.7, 'test_fib_16': 0.7, 'test_fib_17': 0.7, 'test_fib_18': 0.7, 'test_fib_19': 0.7, 'test_fib_20': 0.7}
BEST SAMPLE ON GOOD TESTS: ('\ndef fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n', 1.0)
**********************


-------------------
Final reponse: 
def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
