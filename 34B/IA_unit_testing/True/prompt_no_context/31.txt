Prompt: Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    
-------------------
  {
    "is_prime_test1": {
        "in": {
            "num": 6
        },
        "out": false
    },
    "is_prime_test2": {
        "in": {
            "num": 101
        },
        "out": true
    },
    "is_prime_test3": {
        "in": {
            "num": 11
        },
        "out": true
    },
    "is_prime_test4": {
        "in": {
            "num": 13441
        },
        "out": true
    },
    "is_prime_test5": {
        "in": {
            "num": 61
        },
        "out": true
    },
    "is_prime_test6": {
        "in": {
            "num": 4
        },
        "out": false
    },
    "is_prime_test7": {
        "in": {
            "num": 1
        },
        "out": false
    }
}</s>  Here's a test suite for the `is_prime` function:
```
{
    "test_small_composite_number": {
        "in": {
            "number": 6
        },
        "out": False
    },
    "test_small_prime_number": {
        "in": {
            "number": 11
        },
        "out": True
    },
    "test_large_composite_number": {
        "in": {
            "number": 101
        },
        "out": False
    },
    "test_large_prime_number": {
        "in": {
            "number": 13441
        },
        "out": True
    },
    "test_edge_case_1": {
        "in": {
            "number": 1
        },
        "out": False
    },
    "test_edge_case_2": {
        "in": {
            "number": 4
        },
        "out": False
    }
}
```
This test suite covers a variety of inputs, including small and large numbers, prime and composite numbers, and edge cases such as 1 and 4.</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>  
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'test_small_composite_number': 1.0, 'test_small_prime_number': 1.0, 'test_large_prime_number': 1.0, 'test_edge_case_1': 1.0, 'test_edge_case_2': 1.0}

AUTO_GOOD_TESTS: {'test_small_composite_number': {'in': {'number': 6}, 'out': False}, 'test_small_prime_number': {'in': {'number': 11}, 'out': True}, 'test_large_prime_number': {'in': {'number': 13441}, 'out': True}, 'test_edge_case_1': {'in': {'number': 1}, 'out': False}, 'test_edge_case_2': {'in': {'number': 4}, 'out': False}}
AUTO_BAD_TESTS: {'test_large_composite_number': {'in': {'number': 101}, 'out': False}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_small_composite_number': 1.0, 'test_small_prime_number': 1.0, 'test_large_prime_number': 1.0, 'test_edge_case_1': 1.0, 'test_edge_case_2': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n', 1.0)
**********************


-------------------
Final reponse: 
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
