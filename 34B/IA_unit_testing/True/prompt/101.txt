Prompt: 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """

-------------------
  Here is a test suite for the `words_string` function:
```
{
    "test_single_word": {
        "in": {
            "s": "hello"
        },
        "out": ["hello"]
    },
    "test_multiple_words": {
        "in": {
            "s": "hello world"
        },
        "out": ["hello", "world"]
    },
    "test_comma_separated_words": {
        "in": {
            "s": "hello,world"
        },
        "out": ["hello", "world"]
    },
    "test_space_separated_words": {
        "in": {
            "s": "hello world"
        },
        "out": ["hello", "world"]
    },
    "test_mixed_separators": {
        "in": {
            "s": "hello, world, foo bar"
        },
        "out": ["hello", "world", "foo", "bar"]
    },
    "test_empty_string": {
        "in": {
            "s": ""
        },
        "out": []
    },
    "test_null_string": {
        "in": {
            "s": null
        },
        "out": null
    }
}
```
This test suite covers a variety of inputs, including single words, multiple words separated by spaces or commas, and empty and null strings. It also tests the edge case of a string with multiple words separated by both spaces and commas.</s>  
[PYTHON]
def words_string(s):
    return s.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(s):
    return s.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(s):
    return s.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(my_string):
    return my_string.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(my_string):
    return my_string.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(s):
    return s.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(my_string):
    return my_string.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(my_string):
    return my_string.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(my_string):
    return my_string.split()
[/PYTHON]
</s>  
[PYTHON]
def words_string(my_string):
    return my_string.split()
[/PYTHON]
</s>
NEW TEST EVALUATION RESULTS: {'test_single_word': 1.0, 'test_multiple_words': 1.0, 'test_space_separated_words': 1.0, 'test_empty_string': 1.0}

AUTO_GOOD_TESTS: {'test_single_word': {'in': {'s': 'hello'}, 'out': ['hello']}, 'test_multiple_words': {'in': {'s': 'hello world'}, 'out': ['hello', 'world']}, 'test_space_separated_words': {'in': {'s': 'hello world'}, 'out': ['hello', 'world']}, 'test_empty_string': {'in': {'s': ''}, 'out': []}}
AUTO_BAD_TESTS: {'test_comma_separated_words': {'in': {'s': 'hello,world'}, 'out': ['hello', 'world']}, 'test_mixed_separators': {'in': {'s': 'hello, world, foo bar'}, 'out': ['hello', 'world', 'foo', 'bar']}, 'test_null_string': {'in': {'s': None}, 'out': None}}
INTERESTING_TESTS: {}

GOOD TEST EVALUATION RESULTS: {'test_single_word': 1.0, 'test_multiple_words': 1.0, 'test_space_separated_words': 1.0, 'test_empty_string': 1.0}
BEST SAMPLE ON GOOD TESTS: ('\ndef words_string(s):\n    return s.split()\n', 1.0)

CURRENT BEST CANDIDATE: ('\ndef words_string(s):\n    return s.split()\n', 1.0)
**********************


-------------------
Final reponse: 
def words_string(s):
    return s.split()
